6000-                  4                       .OR             $6000
6000-                  5
6000-                  6                       .IN             constants.asm   ; Constants
4000-            I     1       SCREEN                  .EQU    $4000                   ; 16384
1800-            I     2       SZ_SCRN                 .EQU    $1800                   ; 6144  256*192 pixels, 8-pixels per byte
5800-            I     3       ATTR                    .EQU    $5800                   ; 22528
0300-            I     4       SZ_ATTR                 .EQU    $300                    ; 768   32*24 8-pixel blocks
0060-            I     5       SZ_FONT                 .EQU    $60                             ; 96
5CC0-            I     6       VARS                    .EQU    $5CC0                   ; 23744, used as start of variable space
5F00-            I     7       STACK                   .EQU    $5F00                   ; Stack decrement down from here
0400-            I     8       SIGNATURE               .EQU    $0400                   ; Software signature, used when checking banks.
6000-            I     9
001F-            I    10       CTRL_BANK               .EQU    31                              ; ZX Interface 2.021 bank control port
003F-            I    11       CTRL_LED                .EQU    63                              ; LED for ZX Diagnostic 2.021 cartridge
00FE-            I    12       CTRL_BORDER             .EQU    254                             ; Controls the screen border
6000-            I    13
6000-            I    14       ; Keyboard row definitions
6000-            I    15       ;                                        Bit     0   1 2 3 4
FEFE-            I    16       KR_SH_ZXCV              .EQU    $FEFE                   ;    SHIFT   Z X C V
FBFE-            I    17       KR_QWERT                .EQU    $FBFE                   ;        Q   W E R T
FDFE-            I    18       KR_ASDFG                .EQU    $FDFE                   ;        A   S D F G
F7FE-            I    19       KR_12345                .EQU    $F7FE                   ;        1   2 3 4 5
EFFE-            I    20       KR_09876                .EQU    $EFFE                   ;        0   9 8 7 6
DFFE-            I    21       KR_POIUY                .EQU    $DFFE                   ;        P   O I U Y
BFFE-            I    22       KR_EN_LKJH              .EQU    $BFFE                   ;    ENTER   L K J H
7FFE-            I    23       KR_SP_SY_MNB    .EQU    $7FFE                   ;    SPACE SYM M N B
6000-                  7                       .IN             attributes.asm  ; Attribute definitions
0000-            I     1       A_BLACK         .EQU    %00000000
0001-            I     2       A_BLUE          .EQU    %00000001
0002-            I     3       A_RED           .EQU    %00000010
0003-            I     4       A_MAGENTA       .EQU    %00000011
0004-            I     5       A_GREEN         .EQU    %00000100
0005-            I     6       A_CYAN          .EQU    %00000101
0006-            I     7       A_YELLOW        .EQU    %00000110
0007-            I     8       A_WHITE         .EQU    %00000111
6000-            I     9
0000-            I    10       A_P_BLACK       .EQU    A_BLACK<<3
0008-            I    11       A_P_BLUE        .EQU    A_BLUE<<3
0010-            I    12       A_P_RED         .EQU    A_RED<<3
0018-            I    13       A_P_MAGENTA     .EQU    A_MAGENTA<<3
0020-            I    14       A_P_GREEN       .EQU    A_GREEN<<3
0028-            I    15       A_P_CYAN        .EQU    A_CYAN<<3
0030-            I    16       A_P_YELLOW      .EQU    A_YELLOW<<3
0038-            I    17       A_P_WHITE       .EQU    A_WHITE<<3
6000-            I    18
0040-            I    19       A_BRIGHT        .EQU    %01000000
0080-            I    20       A_FLASH         .EQU    %10000000
6000-                  8
0047-                  9       C_DEF   .EQU    A_P_BLACK|A_WHITE|A_BRIGHT
0047-                 10       C_TITLE .EQU    A_P_BLACK|A_WHITE|A_BRIGHT
0007-                 11       C_NAME  .EQU    A_P_BLACK|A_WHITE
0007-                 12       C_TEXT  .EQU    A_P_BLACK|A_WHITE
0078-                 13       C_SEL   .EQU    A_P_WHITE|A_BLACK|A_BRIGHT
0047-                 14       C_HELP  .EQU    A_P_BLACK|A_WHITE|A_BRIGHT
0042-                 15       C_ERROR .EQU    A_P_BLACK|A_RED|A_BRIGHT
6000-                 16
5CC0-                 17       CUR_X   .EQU    VARS+0                  ; Current cursor location on screen, X
5CC1-                 18       CUR_Y   .EQU    VARS+1                  ;  and Y-location.
5CC2-                 19       LAST_A  .EQU    VARS+2                  ; Last attribute used when clearing screen
5CC3-                 20       CUR_IDX .EQU    VARS+3                  ; Index for title selected
5CC4-                 21       LAST_K  .EQU    VARS+4                  ; Last key value in case we need it
5CC5-                 22       SLOTS   .EQU    VARS+5                  ; Number of slots available
6000-                 23
6000-CD 50 60         24 ( 17) MAIN:   CALL    GET_SLOT_COUNT  ; Calculate SLOTS value
6003-CD CF 62         25 ( 17)                 CALL    RESET_CURSOR    ; Reset cursor
6006-01 00 04         26 ( 10)                 LD              BC,$0400                ; Set up the custom delay routine,
6009-11 00 01         27 ( 10)                 LD              DE,$0100                ;  mainly so that we have time to
600C-CD 33 60         28 ( 17)                 CALL    CUSTOM_DELAY    ;  actually see loader boot screen.
600F-CD 7F 60         29 ( 17)                 CALL    SELECTOR                ; Show selection screen
6012-CD A0 61         30 ( 17) .LOOP:  CALL    READ_INPUT              ; Read keyboard
6015-18 FB            31 ( 12)                 JR              .LOOP                   ; Loop forever.
6017-                 32
6017-                 33       LIB_DELAY:
6017-                 34                       .IN             lib_delay.asm
6017-            I     1       ;
6017-            I     2       ; Performs a simple 16-bit delay loop. I've got no idea of the actual timings,
6017-            I     3       ; but it feels like a little over a second.
6017-            I     4       ;
6017-C5          I     5 ( 11) DELAY:  PUSH    BC
6018-D5          I     6 ( 11)                 PUSH    DE
6019-01 00 04    I     7 ( 10)                 LD              BC,$0400
601C-11 00 01    I     8 ( 10)                 LD              DE,$0100
601F-CD 33 60    I     9 ( 17)                 CALL    CUSTOM_DELAY
6022-D1          I    10 ( 10)                 POP             DE
6023-C1          I    11 ( 10)                 POP             BC
6024-C9          I    12 ( 10)                 RET
6025-            I    13
6025-            I    14       KEY_DELAY:
6025-C5          I    15 ( 11)                 PUSH    BC
6026-D5          I    16 ( 11)                 PUSH    DE
6027-01 55 00    I    17 ( 10)                 LD              BC,$0055
602A-11 55 00    I    18 ( 10)                 LD              DE,$0055
602D-CD 33 60    I    19 ( 17)                 CALL    CUSTOM_DELAY
6030-D1          I    20 ( 10)                 POP             DE
6031-C1          I    21 ( 10)                 POP             BC
6032-C9          I    22 ( 10)                 RET
6033-            I    23
6033-            I    24
6033-            I    25       ;
6033-            I    26       ; Custom delay routine, uses just about anything to burn as many cycles as
6033-            I    27       ; possible. Load BC for an outer loop count, DE for an inner loop to control
6033-            I    28       ; how much time this routine uses. For the exact timings, someone'd need to
6033-            I    29       ; count the cycles and divide it by CPU frequency.
6033-            I    30       ;
6033-            I    31       CUSTOM_DELAY:
6033-C5          I    32 ( 11)                 PUSH    BC                              ; Save current registers, mainly because we
6034-D5          I    33 ( 11)                 PUSH    DE                              ; overwrite just about anything and we need
6035-F5          I    34 ( 11)                 PUSH    AF                              ; the calling routines to stay working.
6036-E5          I    35 ( 11)                 PUSH    HL
6037-7A          I    36 (  4)                 LD              A,D                             ; Let's save the starting value of DE - there's
6038-67          I    37 (  4)                 LD              H,A                             ; probably an easier way, but that requires
6039-7B          I    38 (  4)                 LD              A,E                             ; reading.
603A-6F          I    39 (  4)                 LD              L,A
603B-7C          I    40 (  4) .OUTER: LD              A,H                             ; Restore initial DE value
603C-57          I    41 (  4)                 LD              D,A
603D-7D          I    42 (  4)                 LD              A,L
603E-5F          I    43 (  4)                 LD              E,A
603F-1B          I    44 (  6) .INNER: DEC             DE
6040-7A          I    45 (  4)                 LD              A,D                             ; Decrementing DE does not set Z-flag, so we'll
6041-B3          I    46 (  4)                 OR              E                               ;  need to do do this. It's a quirk.
6042-C2 3F 60    I    47 ( 10)                 JP              NZ,.INNER               ; If DE not 0, then do inner loop again.
6045-0B          I    48 (  6)                 DEC             BC                              ; Z-flag. Again.
6046-78          I    49 (  4)                 LD              A,B
6047-B1          I    50 (  4)                 OR              C
6048-C2 3B 60    I    51 ( 10)                 JP              NZ,.OUTER               ; If BE not 0, then do outer loop again.
604B-E1          I    52 ( 10)                 POP             HL                              ; Restore registers that were overwritten.
604C-F1          I    53 ( 10)                 POP             AF
604D-D1          I    54 ( 10)                 POP             DE
604E-C1          I    55 ( 10)                 POP             BC
604F-C9          I    56 ( 10)                 RET
6050-                 35
6050-                 36       ;
6050-                 37       ; Performs an initial calculation to figure out how many slots we need to
6050-                 38       ; display on the screen. There is a maximum of 4 different values to account
6050-                 39       ; for the four chip selects on cartridge port. CUR_IDX will be a value between
6050-                 40       ; 1 and this calculated value.
6050-                 41       ;
6050-                 42       GET_SLOT_COUNT:
6050-21 FC 7F         43 ( 10)                 LD              HL,SLOT_COUNT
6053-06 04            44 (  7)                 LD              B,4
6055-3E 00            45 (  7)                 LD              A,0
6057-86               46 (  7) .NEXT:  ADD             (HL)
6058-23               47 (  6)                 INC             HL
6059-05               48 (  4)                 DEC             B
605A-20 FB            49 ( 7+)                 JR              NZ,.NEXT
605C-32 C5 5C         50 ( 13)                 LD              (SLOTS),A
605F-C9               51 ( 10)                 RET
6060-                 52
6060-                 53       ;
6060-                 54       ; Error screen display.
6060-                 55       ;
6060-3E 42            56 (  7) ERROR:  LD              A,C_ERROR               ; Load error screen attribute definition,
6062-CD C5 63         57 ( 17)                 CALL    CLR_BG                  ;  and clear the screen with it.
6065-                 58
6065-                 59                       ; Outputs the title block
6065-11 81 64         60 ( 10)                 LD              DE,ERR_TITLE
6068-47               61 (  4)                 LD              B,A
6069-0E C2            62 (  7)                 LD              C,C_ERROR|A_FLASH
606B-CD D6 60         63 ( 17)                 CALL    TITLE_BOX
606E-                 64
606E-                 65                       ; Error message section
606E-CD 76 63         66 ( 17)                 CALL    SET_FONT2               ; Set regular font
6071-21 0A 00         67 ( 10)                 LD              HL,$000A
6074-CD D8 62         68 ( 17)                 CALL    SET_CURSOR
6077-21 A1 64         69 ( 10)                 LD              HL,ERR_MSG
607A-CD 94 63         70 ( 17)                 CALL    PUTS
607D-18 FE            71 ( 12) .LOOP:  JR              .LOOP                   ; Loop forever.
607F-                 72
607F-                 73       ;
607F-                 74       ; Selection screen display
607F-                 75       ;
607F-                 76       SELECTOR:
607F-3E 01            77 (  7)                 LD              A,1                             ; Initialize title index
6081-32 C3 5C         78 ( 13)                 LD              (CUR_IDX),A             ;  save in RAM for later.
6084-3E 47            79 (  7)                 LD              A,C_DEF                 ; Get default attribute value
6086-CD C5 63         80 ( 17)                 CALL    CLR_BG                  ;  and clear screen with it.
6089-                 81
6089-                 82                       ; Outputs the title block
6089-11 00 7C         83 ( 10)                 LD              DE,TITLE0
608C-06 47            84 (  7)                 LD              B,C_TITLE
608E-0E 07            85 (  7)                 LD              C,C_NAME
6090-CD D6 60         86 ( 17)                 CALL    TITLE_BOX
6093-                 87
6093-                 88                       ; Output bank names
6093-CD 4F 61         89 ( 17)                 CALL    UPDATE_TITLES
6096-                 90
6096-                 91                       ; Output help section
6096-3E 47            92 (  7) .HELP:  LD              A,C_HELP
6098-21 15 00         93 ( 10)                 LD              HL,$0015
609B-CD D8 62         94 ( 17)                 CALL    SET_CURSOR
609E-CD 3C 63         95 ( 17)                 CALL    SET_ATTR_ROW
60A1-21 16 00         96 ( 10)                 LD              HL,$0016
60A4-CD D8 62         97 ( 17)                 CALL    SET_CURSOR
60A7-CD 3C 63         98 ( 17)                 CALL    SET_ATTR_ROW
60AA-                 99
60AA-CD 72 63        100 ( 17)                 CALL    SET_FONT1
60AD-21 41 64        101 ( 10)                 LD              HL,MSG_HELP
60B0-CD 94 63        102 ( 17)                 CALL    PUTS
60B3-21 17 00        103 ( 10)                 LD              HL,$0017
60B6-CD D8 62        104 ( 17)                 CALL    SET_CURSOR
60B9-CD 3C 63        105 ( 17)                 CALL    SET_ATTR_ROW
60BC-                106                       ; Print symbols over text as those aren't in the default font.
60BC-11 00 74        107 ( 10)                 LD              DE, FONT_SYMBOLS
60BF-21 16 04        108 ( 10)                 LD              HL,$0416
60C2-CD D8 62        109 ( 17)                 CALL    SET_CURSOR
60C5-3E 00           110 (  7)                 LD              A,0
60C7-CD 53 63        111 ( 17)                 CALL    SET_SYMBOL
60CA-21 16 0B        112 ( 10)                 LD              HL,$0B16
60CD-CD D8 62        113 ( 17)                 CALL    SET_CURSOR
60D0-3E 01           114 (  7)                 LD              A,1
60D2-CD 53 63        115 ( 17)                 CALL    SET_SYMBOL
60D5-C9              116 ( 10)                 RET
60D6-                117
60D6-                118       ;
60D6-                119       ; The title box fiddles around with a lot of symbols to make it look pretty,
60D6-                120       ; so to avoid copying the code we'll generalize it instead.
60D6-                121       ;  DE - Load with screen title address
60D6-                122       ;  B  - Load with title attribute
60D6-                123       ;  C  - Load with cartridge name attribute
60D6-                124       ;
60D6-                125       TITLE_BOX:
60D6-D5              126 ( 11)                 PUSH    DE                              ; Save DE as it points to the title.
60D7-78              127 (  4) .TEXT:  LD              A,B                             ; B holds title attribute
60D8-CD 72 63        128 ( 17)                 CALL    SET_FONT1               ; Set title font
60DB-21 01 00        129 ( 10)                 LD              HL,$0001
60DE-CD D8 62        130 ( 17)                 CALL    SET_CURSOR
60E1-CD 3C 63        131 ( 17)                 CALL    SET_ATTR_ROW
60E4-21 20 64        132 ( 10)                 LD              HL,MSG_TITLE
60E7-CD 94 63        133 ( 17)                 CALL    PUTS
60EA-21 02 00        134 ( 10)                 LD              HL,$0002
60ED-CD D8 62        135 ( 17)                 CALL    SET_CURSOR
60F0-79              136 (  4)                 LD              A,C                             ; C holds cartridge name style
60F1-CD 3C 63        137 ( 17)                 CALL    SET_ATTR_ROW
60F4-E1              138 ( 10)                 POP             HL                              ; Restore previously pushed DE to HL
60F5-CD 94 63        139 ( 17)                 CALL    PUTS                    ;  and use it to output the string.
60F8-                140
60F8-                141       .SYMBOLS:
60F8-78              142 (  4)                 LD              A,B
60F9-11 00 74        143 ( 10)                 LD              DE,FONT_SYMBOLS ; Set font to point to the symbols
60FC-21 00 00        144 ( 10)                 LD              HL,$0000                ; Reset cursor to
60FF-CD D8 62        145 ( 17)                 CALL    SET_CURSOR              ;  start of the screen.
6102-CD 3C 63        146 ( 17)                 CALL    SET_ATTR_ROW    ; Update entire row with style.
6105-21 DE 63        147 ( 10)                 LD              HL,MSG_TB_UPPER
6108-CD A7 63        148 ( 17)                 CALL    PUTSS                   ; Print upper title bar
610B-21 03 00        149 ( 10)                 LD              HL,$0003
610E-CD D8 62        150 ( 17)                 CALL    SET_CURSOR
6111-CD 3C 63        151 ( 17)                 CALL    SET_ATTR_ROW
6114-21 FF 63        152 ( 10)                 LD              HL,MSG_TB_LOWER ; Print lower title bar
6117-CD A7 63        153 ( 17)                 CALL    PUTSS
611A-21 01 00        154 ( 10)                 LD              HL,$0001                ; Fix left title bar
611D-CD D8 62        155 ( 17)                 CALL    SET_CURSOR
6120-3E 08           156 (  7)                 LD              A,$08
6122-CD 53 63        157 ( 17)                 CALL    SET_SYMBOL
6125-21 02 00        158 ( 10)                 LD              HL,$0002
6128-CD D8 62        159 ( 17)                 CALL    SET_CURSOR
612B-3E 08           160 (  7)                 LD              A,$08
612D-CD 53 63        161 ( 17)                 CALL    SET_SYMBOL
6130-78              162 (  4)                 LD              A,B
6131-CD 35 63        163 ( 17)                 CALL    SET_ATTR
6134-21 01 1F        164 ( 10)                 LD              HL,$1F01                ; Fix right title bar
6137-CD D8 62        165 ( 17)                 CALL    SET_CURSOR
613A-3E 09           166 (  7)                 LD              A,$09
613C-CD 53 63        167 ( 17)                 CALL    SET_SYMBOL
613F-21 02 1F        168 ( 10)                 LD              HL,$1F02
6142-CD D8 62        169 ( 17)                 CALL    SET_CURSOR
6145-3E 09           170 (  7)                 LD              A,$09
6147-CD 53 63        171 ( 17)                 CALL    SET_SYMBOL
614A-78              172 (  4)                 LD              A,B
614B-CD 35 63        173 ( 17)                 CALL    SET_ATTR
614E-C9              174 ( 10) .DONE:  RET
614F-                175
614F-                176       ;
614F-                177       ; Updates the names of titles displayed as well as their attributes. Sort of
614F-                178       ; slow for just marking the active line, but too lazy to build a separate one
614F-                179       ; for just the attributes.
614F-                180       ;
614F-                181       UPDATE_TITLES:
614F-F5              182 ( 11)                 PUSH    AF
6150-C5              183 ( 11)                 PUSH    BC
6151-CD 76 63        184 ( 17)                 CALL    SET_FONT2
6154-3A C5 5C        185 ( 13)                 LD              A,(SLOTS)       ; Load number of titles configured.
6157-47              186 (  4)                 LD              B,A
6158-78              187 (  4) .NEXT:  LD              A,B
6159-CD 62 61        188 ( 17)                 CALL    PRINT_TITLE_N
615C-05              189 (  4)                 DEC             B
615D-20 F9           190 ( 7+)                 JR              NZ,.NEXT
615F-C1              191 ( 10)                 POP             BC
6160-F1              192 ( 10)                 POP             AF
6161-C9              193 ( 10)                 RET
6162-                194
6162-                195       ;
6162-                196       ; Prints bank titles to their corresponding line number, value in A is used as
6162-                197       ; bank index.
6162-                198       ;
6162-                199       PRINT_TITLE_N:
6162-E5              200 ( 11)                 PUSH    HL
6163-F5              201 ( 11)                 PUSH    AF                              ; Store title index
6164-21 00 00        202 ( 10)                 LD              HL,$0000                ; Start calculation at 0,0
6167-C6 04           203 (  7)                 ADD             A,4                             ;  add 4 to get screen line to print to,
6169-6F              204 (  4)                 LD              L,A                             ;  then set this as Y-coordinate.
616A-CD D8 62        205 ( 17)                 CALL    SET_CURSOR              ; Update cursor
616D-F1              206 ( 10)                 POP             AF                              ; Get back the original index
616E-CD 79 61        207 ( 17)                 CALL    SET_HIGHLIGHT   ; Set background color depending on index
6171-CD 90 61        208 ( 17)                 CALL    GET_TITLE_ADDR  ; Get title string
6174-CD 94 63        209 ( 17)                 CALL    PUTS                    ; Print it.
6177-E1              210 ( 10)                 POP     HL
6178-C9              211 ( 10)                 RET
6179-                212
6179-                213       ;
6179-                214       ; With the currently being processed index in A, compare that to the actually
6179-                215       ; selected bank index. Change attribute data for the entire row to show the
6179-                216       ; difference.
6179-                217       ;
6179-                218       SET_HIGHLIGHT:
6179-D5              219 ( 11)                 PUSH    DE
617A-F5              220 ( 11)                 PUSH    AF
617B-C5              221 ( 11)                 PUSH    BC
617C-47              222 (  4)                 LD              B,A
617D-3A C3 5C        223 ( 13)                 LD              A,(CUR_IDX)
6180-B8              224 (  4)                 CP              A,B                             ; Check if current index?
6181-20 04           225 ( 7+)                 JR              NZ,.INACTIVE    ;  no, jump to inactive
6183-3E 78           226 (  7)                 LD              A,C_SEL                 ;  yes, so set attribute style to selected.
6185-18 02           227 ( 12)                 JR              .SET_ROW
6187-                228       .INACTIVE:
6187-3E 07           229 (  7)                 LD              A,C_TEXT
6189-                230       .SET_ROW:
6189-CD 3C 63        231 ( 17)                 CALL    SET_ATTR_ROW
618C-C1              232 ( 10)                 POP             BC
618D-F1              233 ( 10)                 POP             AF
618E-D1              234 ( 10)                 POP             DE
618F-C9              235 ( 10)                 RET
6190-                236
6190-                237       ;
6190-                238       ; Get the memory address of the bank title, as indicated by the value in A.
6190-                239       ; This works based on the fact that we chose to use 32 bytes for each of the
6190-                240       ; title strings (this includes $00 termination, so 31 characters max for
6190-                241       ; each of them).
6190-                242       ;
6190-                243       GET_TITLE_ADDR:
6190-F5              244 ( 11)                 PUSH    AF
6191-0F              245 (  4)                 RRCA                                    ; Multiply by 32
6192-0F              246 (  4)                 RRCA
6193-0F              247 (  4)                 RRCA
6194-6F              248 (  4)                 LD              L,A                             ; Store as low byte
6195-E6 03           249 (  7)                 AND             3                               ; Mask bits for high byte
6197-C6 7C           250 (  7)                 ADD             A,$7C                   ;  and with first string address ($7C00)
6199-67              251 (  4)                 LD              H,A                             ; High byte done.
619A-7D              252 (  4)                 LD              A,L                             ; Get back x*32
619B-E6 E0           253 (  7)                 AND             $E0
619D-6F              254 (  4)                 LD              L,A                             ; Put in L.
619E-F1              255 ( 10)                 POP             AF
619F-C9              256 ( 10)                 RET
61A0-                257       ;
61A0-                258       ; Initial routine for handle keyboard input.
61A0-                259       ;
61A0-                260       READ_INPUT:
61A0-E5              261 ( 11)                 PUSH    HL
61A1-CD C3 61        262 ( 17) .JOY1:  CALL    READ_JOY1               ; Read key row corresponding to joystick 1,
61A4-                263                       ; CP            %00011111               ;  then check if no keys were pressed?
61A4-28 02           264 ( 7+)                 JR              Z,.JOY2                 ; Yes, so we go check Q instead.
61A6-18 14           265 ( 12)                 JR              .DONE                   ; We don't want to do anything more.
61A8-CD FF 61        266 ( 17) .JOY2:  CALL    READ_JOY2               ; Read key row corresponding to joystick 2,
61AB-                267                       ; CP            %00011111               ;  then check if no keys were pressed?
61AB-28 02           268 ( 7+)                 JR              Z,.CHK_Q                ; Yes, so we go check Q instead.
61AD-18 0D           269 ( 12)                 JR              .DONE                   ; We don't want to do anything more.
61AF-01 FE FB        270 ( 10) .CHK_Q: LD              BC,KR_QWERT             ; Check for Q key
61B2-CD BE 61        271 ( 17)                 CALL    READ_ROW                ; Read corresponding keyboard row.
61B5-E6 01           272 (  7)                 AND             %00000001               ; Is Q pressed?
61B7-20 03           273 ( 7+)                 JR              NZ,.DONE                ; No, then we are done.
61B9-C3 C9 62        274 ( 10)                 JP              START_BASIC             ; Yes, then we go start basic.
61BC-E1              275 ( 10) .DONE:  POP             HL
61BD-C9              276 ( 10)                 RET
61BE-                277
61BE-                278       ;
61BE-                279       ; Read keyboard row as indicated by the BC registers, value
61BE-                280       ; will be put in A. Note that due to Z80 quirkiness, the
61BE-                281       ; entire BC value (address) will be put on the address bus.
61BE-                282       ;
61BE-                283       READ_ROW:
61BE-ED 78           284 ( 12)                 IN              A,(C)
61C0-E6 1F           285 (  7)                 AND             %00011111               ; Mask out floating bits
61C2-C9              286 ( 10)                 RET
61C3-                287
61C3-                288       ;
61C3-                289       ; Handles a detected key press, but we delay exectution until
61C3-                290       ; we've detected the release of the key (mostly to avoid having to
61C3-                291       ; deal with key repeat delays).
61C3-                292       ;
61C3-                293       READ_JOY1:
61C3-C5              294 ( 11)                 PUSH    BC
61C4-01 FE EF        295 ( 10)                 LD              BC,KR_09876             ; Keys 6 through 9
61C7-CD BE 61        296 ( 17)                 CALL    READ_ROW                ; Read row,
61CA-FE 1F           297 (  7)                 CP              %00011111               ;  check if no keys are pressed?
61CC-28 2D           298 ( 7+)                 JR              Z,.DONE                 ; Yes, so we go check Q instead.
61CE-                299
61CE-D5              300 ( 11)                 PUSH    DE
61CF-32 C4 5C        301 ( 13)                 LD              (LAST_K),A              ; Store key for later
61D2-CD 25 60        302 ( 17) .AGAIN: CALL    KEY_DELAY
61D5-CD BE 61        303 ( 17)                 CALL    READ_ROW                ; Read row again, and then
61D8-FE 1F           304 (  7)                 CP              %00011111               ;  check if no keys are pressed?
61DA-28 02           305 ( 7+)                 JR              Z,.RELEASED             ; Yes, so go do something.
61DC-18 F4           306 ( 12)                 JR              .AGAIN
61DE-                307       .RELEASED:
61DE-D1              308 ( 10)                 POP             DE
61DF-3A C4 5C        309 ( 13)                 LD              A,(LAST_K)              ; Read it back again.
61E2-FE 1D           310 (  7) .CHK_9: CP              %00011101               ; Bit 1 is zero for UP
61E4-20 05           311 ( 7+)                 JR              NZ,.CHK_8               ; Next key, unless we have a match.
61E6-CD 39 62        312 ( 17)                 CALL    MOVE_UP
61E9-18 10           313 ( 12)                 JR              .DONE
61EB-FE 1B           314 (  7) .CHK_8: CP              %00011011               ; Bit 2 is zero for DOWN
61ED-20 05           315 ( 7+)                 JR              NZ,.CHK_0               ; Next key, unless we have a match.
61EF-CD 4A 62        316 ( 17)                 CALL    MOVE_DOWN
61F2-18 07           317 ( 12)                 JR              .DONE
61F4-FE 1E           318 (  7) .CHK_0: CP              %00011110               ; Bit 0 is zero for FIRE
61F6-20 03           319 ( 7+)                 JR              NZ,.DONE                ; Done checking, unless we have a match.
61F8-CD 60 62        320 ( 17)                 CALL    PRESS_FIRE
61FB-C1              321 ( 10) .DONE:  POP             BC
61FC-FE 1F           322 (  7)                 CP              %00011111               ; Update Z-flag to indicate no key
61FE-C9              323 ( 10)                 RET
61FF-                324
61FF-                325       ;
61FF-                326       ; Handles a detected key press, but we delay exectution until
61FF-                327       ; we've detected the release of the key (mostly to avoid having to
61FF-                328       ; deal with key repeat delays).
61FF-                329       ;
61FF-                330       READ_JOY2:
61FF-C5              331 ( 11)                 PUSH    BC
6200-01 FE F7        332 ( 10)                 LD              BC,KR_12345             ; Keys 1 through 5
6203-CD BE 61        333 ( 17)                 CALL    READ_ROW                ; Read row,
6206-FE 1F           334 (  7)                 CP              %00011111               ;  check if no keys are pressed?
6208-28 2D           335 ( 7+)                 JR              Z,.DONE                 ; Yes, so we go check Q instead.
620A-                336
620A-D5              337 ( 11)                 PUSH    DE
620B-32 C4 5C        338 ( 13)                 LD              (LAST_K),A              ; Store key for later
620E-CD 25 60        339 ( 17) .AGAIN: CALL    KEY_DELAY
6211-CD BE 61        340 ( 17)                 CALL    READ_ROW                ; Read row again, and then
6214-FE 1F           341 (  7)                 CP              %00011111               ;  check if all keys released.
6216-28 02           342 ( 7+)                 JR              Z,.RELEASED             ; Yes, so go do something.
6218-18 F4           343 ( 12)                 JR              .AGAIN
621A-                344       .RELEASED:
621A-D1              345 ( 10)                 POP             DE
621B-3A C4 5C        346 ( 13)                 LD              A,(LAST_K)              ; Read it back again.
621E-FE 17           347 (  7) .CHK_4: CP              %00010111               ; Bit 3 is zero for UP
6220-20 05           348 ( 7+)                 JR              NZ,.CHK_3               ; Next key, unless we have a match.
6222-CD 39 62        349 ( 17)                 CALL    MOVE_UP
6225-18 10           350 ( 12)                 JR              .DONE
6227-FE 1B           351 (  7) .CHK_3: CP              %00011011               ; Bit 2 is zero for DOWN
6229-20 05           352 ( 7+)                 JR              NZ,.CHK_5               ; Next key, unless we have a match.
622B-CD 4A 62        353 ( 17)                 CALL    MOVE_DOWN
622E-18 07           354 ( 12)                 JR              .DONE
6230-FE 0F           355 (  7) .CHK_5: CP              %00001111               ; Bit 4 is zero for FIRE
6232-20 03           356 ( 7+)                 JR              NZ,.DONE                ; Done checking, unless we have a match.
6234-CD 60 62        357 ( 17)                 CALL    PRESS_FIRE
6237-C1              358 ( 10) .DONE:  POP             BC
6238-C9              359 ( 10)                 RET
6239-                360
6239-                361       ;
6239-                362       ; Move selection up, decrementing the index as we go. The code ensures that
6239-                363       ; we don't go past the minimum value of of 1 (bank 0 is this program).
6239-                364       ;
6239-                365       MOVE_UP:
6239-F5              366 ( 11)                 PUSH    AF
623A-3A C3 5C        367 ( 13)                 LD              A,(CUR_IDX)             ; Load current index number.
623D-                368
623D-FE 01           369 (  7)                 CP              1                               ; Already at minimum index?
623F-28 04           370 ( 7+)                 JR              Z,.DONE                 ; Yes, then we are done.
6241-3D              371 (  4)                 DEC             A                               ; No, so let's bump it up one position.
6242-32 C3 5C        372 ( 13)                 LD              (CUR_IDX),A
6245-CD 4F 61        373 ( 17) .DONE:  CALL    UPDATE_TITLES   ; Update the titles with highlight.
6248-F1              374 ( 10)                 POP             AF
6249-C9              375 ( 10)                 RET
624A-                376
624A-                377       ;
624A-                378       ; Move selection down, incrementing the index as far as we can go. This value
624A-                379       ; comes from the SLOTS variable, initially calculated from the values entered
624A-                380       ; in NUM_TITLES at the end of the image. We need to do this so that we can't
624A-                381       ; go past the size of the actual EEPROM.
624A-                382       ;
624A-                383       MOVE_DOWN:
624A-F5              384 ( 11)                 PUSH    AF
624B-C5              385 ( 11)                 PUSH    BC
624C-3A C5 5C        386 ( 13)                 LD              A,(SLOTS)               ; Get the maximum number we can have,
624F-47              387 (  4)                 LD              B,A                             ;  save it in C for later comparison.
6250-3A C3 5C        388 ( 13)                 LD              A,(CUR_IDX)             ; Load current index number.
6253-                389
6253-B8              390 (  4)                 CP              B                               ; Already at maximum index?
6254-28 04           391 ( 7+)                 JR              Z,.DONE                 ; Yes, then we are done.
6256-3C              392 (  4)                 INC             A                               ; No, so let's bump it up one position.
6257-32 C3 5C        393 ( 13)                 LD              (CUR_IDX),A
625A-CD 4F 61        394 ( 17) .DONE:  CALL    UPDATE_TITLES   ; Update the titles with highlight.
625D-C1              395 ( 10)                 POP             BC
625E-F1              396 ( 10)                 POP             AF
625F-C9              397 ( 10)                 RET
6260-                398
6260-                399       ;
6260-                400       ; The fire button has been pushed, so we'll attempt to perform bank switching.
6260-                401       ;
6260-                402       PRESS_FIRE:
6260-F5              403 ( 11)                 PUSH    AF
6261-C5              404 ( 11)                 PUSH    BC
6262-E5              405 ( 11)                 PUSH    HL
6263-D5              406 ( 11)                 PUSH    DE
6264-                407
6264-CD 7E 62        408 ( 17)                 CALL    GET_BANK_IDENTIFIER
6267-7C              409 (  4)                 LD              A,H                             ; Bank identifier in A
6268-45              410 (  4)                 LD              B,L                             ; Chip identifier in B
6269-CB 10           411 (  8)                 RL              B                               ; Shift CS value into correct position, these
626B-CB 10           412 (  8)                 RL              B                               ;  should be bit 6 and 7 on the bank switching
626D-CB 10           413 (  8)                 RL              B                               ;  register.
626F-CB 10           414 (  8)                 RL              B
6271-CB 10           415 (  8)                 RL              B
6273-CB 10           416 (  8)                 RL              B
6275-80              417 (  4)                 ADD             B                               ; Add slot number to it
6276-                418
6276-CD AB 62        419 ( 17)                 CALL    SET_BANK
6279-                420
6279-D1              421 ( 10)                 POP             DE
627A-E1              422 ( 10)                 POP             HL
627B-C1              423 ( 10)                 POP             BC
627C-F1              424 ( 10)                 POP             AF
627D-C9              425 ( 10)                 RET                                             ; We should never be able to get here.
627E-                426
627E-                427       ;
627E-                428       ; Converts the current slot index into a value suitable for use with the
627E-                429       ; bank switching scheme, this is mostly complicated due to the four counters
627E-                430       ; used. On return H will hold bank value, L will indicate the chip identifier.
627E-                431       ;
627E-                432       GET_BANK_IDENTIFIER:
627E-F5              433 ( 11)                 PUSH    AF
627F-C5              434 ( 11)                 PUSH    BC
6280-D5              435 ( 11)                 PUSH    DE
6281-                436
6281-21 FC 7F        437 ( 10)                 LD              HL,SLOT_COUNT
6284-0E 04           438 (  7)                 LD              C,4
6286-3A C3 5C        439 ( 13)                 LD              A,(CUR_IDX)
6289-57              440 (  4)                 LD              D,A
628A-3E 00           441 (  7)                 LD              A,0
628C-1E 00           442 (  7)                 LD              E,0
628E-                443       .NEXT_CHIP:
628E-46              444 (  7)                 LD              B,(HL)
628F-1E 00           445 (  7)                 LD              E,0
6291-1C              446 (  4) .NEXT:  INC             E
6292-3C              447 (  4)                 INC     A
6293-BA              448 (  4)                 CP              D
6294-28 07           449 ( 7+)                 JR              Z,.DONE
6296-                450
6296-05              451 (  4)                 DEC             B
6297-20 F8           452 ( 7+)                 JR              NZ,.NEXT
6299-                453
6299-23              454 (  6)                 INC             HL
629A-0D              455 (  4)                 DEC             C
629B-20 F1           456 ( 7+)                 JR              NZ,.NEXT_CHIP
629D-                457
629D-                458       .DONE:
629D-3E 04           459 (  7)                 LD              A,4
629F-91              460 (  4)                 SUB             C
62A0-47              461 (  4)                 LD              B,A
62A1-20 01           462 ( 7+)                 JR              NZ,.OFFSET_LOADER
62A3-1C              463 (  4)                 INC             E
62A4-                464       .OFFSET_LOADER:
62A4-1D              465 (  4)                 DEC             E
62A5-63              466 (  4)                 LD              H,E
62A6-6F              467 (  4)                 LD              L,A
62A7-                468
62A7-D1              469 ( 10)                 POP             DE
62A8-C1              470 ( 10)                 POP             BC
62A9-F1              471 ( 10)                 POP             AF
62AA-C9              472 ( 10)                 RET
62AB-                473
62AB-                474       ;
62AB-                475       ; Configures bank switching according to value in A. Before restarting at
62AB-                476       ; $0000 to start the bank that has been switched in, we'll try to ensure
62AB-                477       ; that the bank was actually switched - this is done by looking for a text
62AB-                478       ; signature at $0400. After switching the first two bytes probably shouldn't
62AB-                479       ; match 'Z' and 'X'.
62AB-                480       ;
62AB-                481       SET_BANK:
62AB-F3              482 (  4)                 DI                                              ; Disable interrupts
62AC-0E 3F           483 (  7)                 LD              C,CTRL_LED              ; Controls LEDs found on ZX Diagnostic 2.021
62AE-ED 79           484 ( 12)                 OUT             (C),A                   ;  so let's just write the value to it.
62B0-0E 1F           485 (  7)                 LD              C,CTRL_BANK             ; Port used for controlling the bank switching
62B2-ED 79           486 ( 12)                 OUT             (C),A                   ;  we write the same value.
62B4-21 00 04        487 ( 10) .CHECK: LD              HL,SIGNATURE    ; Banks should now have been switched around,
62B7-7E              488 (  7)                 LD              A,(HL)                  ;  but in order to make sure we'll check.
62B8-FE 5A           489 (  7)                 CP              'Z'
62BA-20 09           490 ( 7+)                 JR              NZ,.OK
62BC-23              491 (  6)                 INC             HL
62BD-7E              492 (  7)                 LD              A,(HL)
62BE-FE 58           493 (  7)                 CP              'X'
62C0-20 03           494 ( 7+)                 JR              NZ,.OK
62C2-C3 60 60        495 ( 10) .ERROR: JP              ERROR                   ; Jump out of main loop and set error screen.
62C5-C3 00 00        496 ( 10) .OK:    JP              $0000                   ; Looks good, so we'll just start from the bank.
62C8-C9              497 ( 10)                 RET                                             ; We should never be able to get here.
62C9-                498
62C9-                499       ;
62C9-                500       ; Start ZX Basic. This is done by attempting to deactivate the bank switching
62C9-                501       ; hardware, then before restarting at $0000 a check will be made to see that
62C9-                502       ; the loader ROM has disappeared.
62C9-                503       ;
62C9-                504       START_BASIC:
62C9-3E 20           505 (  7)                 LD              A,%00100000             ; Bit 5 disables bank switching.
62CB-CD AB 62        506 ( 17)                 CALL    SET_BANK                ; Try to do it.
62CE-C9              507 ( 10)                 RET                                             ; We should never be able to get here.
62CF-                508
62CF-                509       ;
62CF-                510       ; Reset cursor position.
62CF-                511       ;
62CF-                512       RESET_CURSOR:
62CF-3E 00           513 (  7)                 LD              A,0
62D1-32 C0 5C        514 ( 13)                 LD              (CUR_X),A
62D4-32 C1 5C        515 ( 13)                 LD              (CUR_Y),A
62D7-C9              516 ( 10)                 RET
62D8-                517
62D8-                518       ;
62D8-                519       ; Set cursor position, HL register is treated as X,Y character coordinates.
62D8-                520       ; Example:
62D8-                521       ;               LD A,$0102 will set X=1 and Y=2
62D8-                522       ;
62D8-                523       SET_CURSOR:
62D8-F5              524 ( 11)                 PUSH    AF
62D9-7C              525 (  4)                 LD              A,H
62DA-32 C0 5C        526 ( 13)                 LD              (CUR_X),A
62DD-7D              527 (  4)                 LD              A,L
62DE-32 C1 5C        528 ( 13)                 LD              (CUR_Y),A
62E1-F1              529 ( 10)                 POP             AF
62E2-C9              530 ( 10)                 RET
62E3-                531
62E3-                532       ;
62E3-                533       ; Loads cursor into HL register, this moves data in exactly the opposite
62E3-                534       ; way as SET_CURSOR.
62E3-                535       ;
62E3-                536       GET_CURSOR:
62E3-F5              537 ( 11)                 PUSH    AF
62E4-3A C0 5C        538 ( 13)                 LD              A,(CUR_X)
62E7-67              539 (  4)                 LD              H,A
62E8-3A C1 5C        540 ( 13)                 LD              A,(CUR_Y)
62EB-6F              541 (  4)                 LD              L,A
62EC-F1              542 ( 10)                 POP             AF
62ED-C9              543 ( 10)                 RET
62EE-                544
62EE-                545       ;
62EE-                546       ; Increment cursor position. While the screen attribute memory is organized
62EE-                547       ; as expected, the RAM used for the pixel data is not - so we need to track
62EE-                548       ; when we cross over from one line into the next.
62EE-                549       ;
62EE-                550       INC_CURSOR:
62EE-F5              551 ( 11)                 PUSH    AF                              ; Save AF for when I forget it
62EF-3A C0 5C        552 ( 13)                 LD              A,(CUR_X)
62F2-FE 1F           553 (  7)                 CP              32-1                    ; Check if in last column
62F4-38 07           554 ( 7+)                 JR              C,.INC_X                ; no, just increment X
62F6-3E 00           555 (  7)                 LD              A,0                             ; yes, so we:
62F8-32 C0 5C        556 ( 13)                 LD              (CUR_X),A               ;   reset X
62FB-18 09           557 ( 12)                 JR              .INC_Y                  ;   increment Y
62FD-3A C0 5C        558 ( 13) .INC_X: LD              A,(CUR_X)
6300-3C              559 (  4)                 INC             A
6301-32 C0 5C        560 ( 13)                 LD              (CUR_X),A
6304-18 15           561 ( 12)                 JR              .DONE
6306-3A C1 5C        562 ( 13) .INC_Y: LD              A,(CUR_Y)
6309-FE 17           563 (  7)                 CP              24-1                    ; Check if on last row
630B-38 07           564 ( 7+)                 JR              C,.NXT_Y                ; no, just go to the next
630D-3E 00           565 (  7)                 LD              A,0                             ;   yes, so we:
630F-32 C1 5C        566 ( 13)                 LD              (CUR_Y),A               ;   reset Y
6312-18 07           567 ( 12)                 JR              .DONE                   ;   and we are done.
6314-3A C1 5C        568 ( 13) .NXT_Y: LD              A,(CUR_Y)
6317-3C              569 (  4)                 INC             A
6318-32 C1 5C        570 ( 13)                 LD              (CUR_Y),A
631B-F1              571 ( 10) .DONE:  POP             AF                              ; Restore AF
631C-C9              572 ( 10)                 RET
631D-                573
631D-                574       ;
631D-                575       ; Get the memory address for the attribute as indicated by the cursor.
631D-                576       ; At the end, HL should hold an address from $5800 and upwards.
631D-                577       ;
631D-                578       GET_ATTR_ADDR:
631D-F5              579 ( 11)                 PUSH    AF
631E-3A C1 5C        580 ( 13)                 LD              A,(CUR_Y)               ; X position
6321-0F              581 (  4)                 RRCA                                    ; Multiply by 32
6322-0F              582 (  4)                 RRCA
6323-0F              583 (  4)                 RRCA
6324-6F              584 (  4)                 LD              L,A                             ; Store as low byte
6325-E6 03           585 (  7)                 AND             3                               ; Mask bits for high byte
6327-C6 58           586 (  7)                 ADD             A,$58                   ; And with start of attribute address
6329-67              587 (  4)                 LD              H,A                             ; High byte done.
632A-7D              588 (  4)                 LD              A,L                             ; Get back x*32
632B-E6 E0           589 (  7)                 AND             $E0
632D-6F              590 (  4)                 LD              L,A                             ; Put in L.
632E-3A C0 5C        591 ( 13)                 LD              A,(CUR_X)               ; Get row start
6331-85              592 (  4)                 ADD             A,L                             ; Add to low byte
6332-6F              593 (  4)                 LD              L,A
6333-F1              594 ( 10)                 POP             AF
6334-C9              595 ( 10)                 RET
6335-                596
6335-                597       ;
6335-                598       ; Set attributes for the block currently indicated by the
6335-                599       ; cursor.
6335-                600       ;
6335-                601       SET_ATTR:
6335-E5              602 ( 11)                 PUSH    HL
6336-CD 1D 63        603 ( 17)                 CALL    GET_ATTR_ADDR
6339-77              604 (  7)                 LD              (HL),A
633A-E1              605 ( 10)                 POP             HL
633B-C9              606 ( 10)                 RET
633C-                607
633C-                608       ;
633C-                609       ; Set the attributes for a row of screen memory, automatically setting the
633C-                610       ; cursor location to the beginning of the row. Does not increment after
633C-                611       ; every character as we're not actually printing data.
633C-                612       ;
633C-                613       SET_ATTR_ROW:
633C-E5              614 ( 11)                 PUSH    HL
633D-C5              615 ( 11)                 PUSH    BC
633E-CD 1D 63        616 ( 17)                 CALL    GET_ATTR_ADDR
6341-                617
6341-06 20           618 (  7)                 LD              B,32
6343-77              619 (  7) .NEXT:  LD              (HL),A
6344-23              620 (  6)                 INC             HL
6345-05              621 (  4)                 DEC             B
6346-20 FB           622 ( 7+)                 JR              NZ,.NEXT
6348-C1              623 ( 10)                 POP             BC
6349-E1              624 ( 10)                 POP             HL
634A-C9              625 ( 10)                 RET
634B-                626
634B-                627       ;
634B-                628       ; Output character to the screen. Given that the assembled sources will be
634B-                629       ; expected to be ASCII, we'll need to subtract 32 from the value.
634B-                630       ;
634B-                631       SET_CHAR:
634B-F5              632 ( 11)                 PUSH    AF
634C-D6 20           633 (  7)                 SUB             32                              ; Subtract 32 from ASCII to get font offset
634E-CD 53 63        634 ( 17)                 CALL    SET_SYMBOL
6351-F1              635 ( 10)                 POP             AF
6352-C9              636 ( 10)                 RET
6353-                637
6353-                638       ;
6353-                639       ; Outputs character with A specifying index into font data, note that DE is
6353-                640       ; expected to hold the memory reference for the font used.
6353-                641       ;
6353-                642       SET_SYMBOL:
6353-C5              643 ( 11)                 PUSH    BC
6354-D5              644 ( 11)                 PUSH    DE
6355-E5              645 ( 11)                 PUSH    HL
6356-CD 7A 63        646 ( 17)                 CALL    GET_SCREEN_ADDR ; Get screen address for cursor location
6359-06 00           647 (  7)                 LD              B,0                             ; Find FONT_DATA character index
635B-4F              648 (  4)                 LD              C,A
635C-                649
635C-CB 21           650 (  8)                 SLA             C
635E-CB 10           651 (  8)                 RL              B
6360-CB 21           652 (  8)                 SLA             C
6362-CB 10           653 (  8)                 RL              B
6364-CB 21           654 (  8)                 SLA             C
6366-CB 10           655 (  8)                 RL              B
6368-                656
6368-EB              657 (  4)                 EX              DE, HL
6369-09              658 ( 11)                 ADD     HL, BC
636A-EB              659 (  4)                 EX              DE, HL
636B-CD BA 63        660 ( 17)                 CALL    SET_CHAR_PIXELS ; Output pixels to screen memory
636E-E1              661 ( 10)                 POP     HL
636F-D1              662 ( 10)                 POP             DE
6370-C1              663 ( 10)                 POP             BC
6371-C9              664 ( 10)                 RET
6372-                665
6372-                666       SET_FONT1:
6372-11 00 75        667 ( 10)                 LD              DE,FONT1                ; Start of font data
6375-C9              668 ( 10)                 RET
6376-                669
6376-                670       SET_FONT2:
6376-11 00 78        671 ( 10)                 LD              DE,FONT2
6379-C9              672 ( 10)                 RET
637A-                673
637A-                674       ;
637A-                675       ; Get the memory address for the character as indicated by the cursor,
637A-                676       ; the location in screen memory will be left in HL (from $4000 to $57FF).
637A-                677       ;
637A-                678       GET_SCREEN_ADDR:
637A-F5              679 ( 11)                 PUSH    AF
637B-3A C0 5C        680 ( 13)                 LD              A,(CUR_X)
637E-6F              681 (  4)                 LD              L,A
637F-                682
637F-3A C1 5C        683 ( 13)                 LD              A,(CUR_Y)
6382-E6 07           684 (  7)                 AND     %00000111
6384-1F              685 (  4)                 RRA
6385-1F              686 (  4)                 RRA
6386-1F              687 (  4)                 RRA
6387-1F              688 (  4)                 RRA
6388-B5              689 (  4)                 OR              L
6389-6F              690 (  4)                 LD              L,A
638A-3A C1 5C        691 ( 13)                 LD              A,(CUR_Y)
638D-E6 18           692 (  7)                 AND     %00011000
638F-F6 40           693 (  7)                 OR              /SCREEN                 ; Screen address HI byte
6391-67              694 (  4)                 LD              H,A
6392-                695
6392-F1              696 ( 10)                 POP             AF
6393-C9              697 ( 10)                 RET
6394-                698
6394-                699       ;
6394-                700       ; Print string to the current cursor position, incrementing for each character
6394-                701       ; that is "printed" to the screen memory.
6394-                702       ;
6394-E5              703 ( 11) PUTS:   PUSH    HL
6395-F5              704 ( 11)                 PUSH    AF
6396-7E              705 (  7) .NEXT:  LD              A,(HL)
6397-B7              706 (  4)                 OR              A                               ; OR with itself to update the Z-flag.
6398-28 0A           707 ( 7+)                 JR              Z,.DONE                 ; Done if we found byte that is $00
639A-CD 4B 63        708 ( 17)                 CALL    SET_CHAR                ; Output character to cursor location
639D-CD EE 62        709 ( 17)                 CALL    INC_CURSOR              ; Increment cursor to next position
63A0-23              710 (  6)                 INC             HL                              ; Next character
63A1-C3 96 63        711 ( 10)                 JP              .NEXT
63A4-F1              712 ( 10) .DONE:  POP             AF
63A5-E1              713 ( 10)                 POP             HL
63A6-C9              714 ( 10)                 RET
63A7-                715
63A7-                716       ;
63A7-                717       ; Same as above except that we output symbols directly instead of translating
63A7-                718       ; ASCII characters (that way we don't have to hardcode symbols at +32).
63A7-                719       ;
63A7-E5              720 ( 11) PUTSS:  PUSH    HL
63A8-F5              721 ( 11)                 PUSH    AF
63A9-7E              722 (  7) .NEXT:  LD              A,(HL)
63AA-B7              723 (  4)                 OR              A                               ; OR with itself to update the Z-flag.
63AB-28 0A           724 ( 7+)                 JR              Z,.DONE                 ; Done if we found byte that is $00
63AD-CD 53 63        725 ( 17)                 CALL    SET_SYMBOL              ; Output character to cursor location
63B0-CD EE 62        726 ( 17)                 CALL    INC_CURSOR              ; Increment cursor to next position
63B3-23              727 (  6)                 INC             HL                              ; Next character
63B4-C3 A9 63        728 ( 10)                 JP              .NEXT
63B7-F1              729 ( 10) .DONE:  POP             AF
63B8-E1              730 ( 10)                 POP             HL
63B9-C9              731 ( 10)                 RET
63BA-                732
63BA-                733       ;
63BA-                734       ; Output character data into screen memory, these are 8x8 pixels - meaning
63BA-                735       ; we'll need to update eight different lines on the screen.
63BA-                736       ;
63BA-                737       SET_CHAR_PIXELS:
63BA-06 08           738 (  7)                 LD              B,8                             ; 8 lines per character
63BC-1A              739 (  7) .NEXT:  LD              A,(DE)                  ; Load character byte data
63BD-77              740 (  7)                 LD              (HL),A                  ; Store byte data in screen memory
63BE-13              741 (  6)                 INC             DE                              ; Next character byte
63BF-24              742 (  4)                 INC             H                               ; Screen line start every $100, so we do that
63C0-10 FA           743 ( 8+)                 DJNZ    .NEXT                   ; Loop unless B reached 0.
63C2-C9              744 ( 10)                 RET
63C3-                745
63C3-                746       ;
63C3-                747       ; Clear the entire screen, value in A is used to initialize the corresponding
63C3-                748       ; attribute bytes (when CLR_BG is called directly). The byte must have the
63C3-                749       ; following composition:
63C3-                750       ;       bit 0 (ink bit 0)
63C3-                751       ;           1 (        1)
63C3-                752       ;           2 (        2)
63C3-                753       ;       bit 3 (paper bit 0)
63C3-                754       ;           4 (          1)
63C3-                755       ;       5 (          2)
63C3-                756       ;   bit 6 (bright mode)
63C3-                757       ;   bit 7 (flash mode)
63C3-                758       ;
63C3-3E 00           759 (  7) CLEAR:  LD              A,0
63C5-F5              760 ( 11) CLR_BG: PUSH    AF
63C6-32 C2 5C        761 ( 13)                 LD              (LAST_A),A              ; Save attribute value for later
63C9-21 00 40        762 ( 10)                 LD              HL,SCREEN               ; Screen memory start
63CC-11 01 40        763 ( 10)                 LD              DE,SCREEN+1
63CF-01 00 18        764 ( 10)                 LD              BC,SZ_SCRN
63D2-36 00           765 ( 10)                 LD              (HL),0
63D4-ED B0           766 (16+)                 LDIR                                    ; Loop until we've written SZ_SCRN bytes
63D6-01 FF 02        767 ( 10)                 LD              BC,SZ_ATTR-1
63D9-77              768 (  7)                 LD              (HL),A
63DA-ED B0           769 (16+)                 LDIR                                    ; Loop until we've written all attributes
63DC-F1              770 ( 10)                 POP             AF
63DD-C9              771 ( 10)                 RET
63DE-                772
63DE-                773       MSG_TB_UPPER:
63DE-02 03 03 03 
     03 03 03 03 
     03 03 03 03 
     03 03 03        774                       .DB             $02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
63ED-03 03 03 03 
     03 03 03 03 
     03 03 03 03 
     03 03 03        775                       .DB             $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
63FC-03 04 00        776                       .DB             $03,$04,$00
63FF-                777       MSG_TB_LOWER:
63FF-06 05 05 05 
     05 05 05 05 
     05 05 05 05 
     05 05 05        778                       .DB             $06,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
640E-05 05 05 05 
     05 05 05 05 
     05 05 05 05 
     05 05 05        779                       .DB             $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
641D-05 07 00        780                       .DB             $05,$07,$00
6420-                781       MSG_TITLE:
6420-20 20 20 20 
     20 20 20 5A 
     58 20 49 4E 
     54 45 52 46 
     41 43 45 20 
     32 2E 30 32 
     31 20 20 20 
     20 20 20 20 
     00              782                       .AZ             "       ZX INTERFACE 2.021       "
6441-                783       MSG_HELP:
6441-20 20 20 28 
     3F 20 3D 20 
     38 20 20 3F 
     20 3D 20 39 
     20 20 53 54 
     41 52 54 20 
     3D 20 30 29 
     20 20 20 20     784                       .AS             "   (? = 8  ? = 9  START = 0)    "
6461-20 20 20 20 
     20 20 20 20 
     28 51 20 3D 
     20 5A 58 20 
     42 61 73 69 
     63 29 20 20 
     20 20 20 20 
     20 20 20 00     785                       .AZ             "        (Q = ZX Basic)         "
6481-                786       ERR_TITLE:
6481-20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 45 52 52 
     4F 52 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 00     787                       .AZ             "             ERROR             "
64A1-                788       ERR_MSG:
64A1-20 22 43 61 
     72 74 72 69 
     64 67 65 20 
     62 61 6E 6B 
     20 6E 6F 74 
     20 73 77 69 
     74 63 68 65 
     64 20 6F 75 
     74 20 61 73 
     20 65 78 70 
     65 63 74 65 
     64 2E 20 53 
     6F 66 74 77 
     61 72 65 20 
     66 6F 72        789                       .AS             " \"Cartridge bank not switched out as expected. Software for"
64DC-20 75 73 65 
     20 77 69 74 
     68 20 5A 58 
     20 49 6E 74 
     65 72 66 61 
     63 65 20 32 
     2E 30 32 31 
     20 6F 72 20 
     63 6F 6D 70 
     61 74 69 62 
     6C 65 20 68 
     61 72 64 77 
     61 72 65 2E 
     22 00           790                       .AZ             " use with ZX Interface 2.021 or compatible hardware.\""
6512-                791
7400                792                       .NO             $7400
7400-                793       FONT_SYMBOLS:
7400-                794                       .IN             font_symbols.asm
7400-            I     1               ; 00 (DOWN arrow)
7400-00          I     2               .db     %00000000
7401-FF          I     3               .db     %11111111
7402-81          I     4               .db     %10000001
7403-42          I     5               .db     %01000010
7404-24          I     6               .db     %00100100
7405-18          I     7               .db     %00011000
7406-00          I     8               .db     %00000000
7407-00          I     9               .db     %00000000
7408-            I    10
7408-            I    11               ; 01 (UP arrow)
7408-00          I    12               .db     %00000000
7409-18          I    13               .db     %00011000
740A-24          I    14               .db     %00100100
740B-42          I    15               .db     %01000010
740C-81          I    16               .db     %10000001
740D-FF          I    17               .db     %11111111
740E-00          I    18               .db     %00000000
740F-00          I    19               .db     %00000000
7410-            I    20
7410-            I    21               ; 02 (Upper left corner)
7410-00          I    22               .db     %00000000
7411-7F          I    23               .db     %01111111
7412-40          I    24               .db     %01000000
7413-5F          I    25               .db     %01011111
7414-50          I    26               .db     %01010000
7415-50          I    27               .db     %01010000
7416-50          I    28               .db     %01010000
7417-50          I    29               .db     %01010000
7418-            I    30
7418-            I    31               ; 03 (Upper line)
7418-00          I    32               .db     %00000000
7419-FF          I    33               .db     %11111111
741A-00          I    34               .db     %00000000
741B-FF          I    35               .db     %11111111
741C-00          I    36               .db     %00000000
741D-00          I    37               .db     %00000000
741E-00          I    38               .db     %00000000
741F-00          I    39               .db     %00000000
7420-            I    40
7420-            I    41               ; 04 (Upper right corner)
7420-00          I    42               .db     %00000000
7421-FE          I    43               .db     %11111110
7422-02          I    44               .db     %00000010
7423-FA          I    45               .db     %11111010
7424-0A          I    46               .db     %00001010
7425-0A          I    47               .db     %00001010
7426-0A          I    48               .db     %00001010
7427-0A          I    49               .db     %00001010
7428-            I    50
7428-            I    51               ; 05 (Lower line)
7428-00          I    52               .db     %00000000
7429-00          I    53               .db     %00000000
742A-00          I    54               .db     %00000000
742B-00          I    55               .db     %00000000
742C-FF          I    56               .db     %11111111
742D-00          I    57               .db     %00000000
742E-FF          I    58               .db     %11111111
742F-00          I    59               .db     %00000000
7430-            I    60
7430-            I    61               ; 06 (Lower left corner)
7430-50          I    62               .db     %01010000
7431-50          I    63               .db     %01010000
7432-50          I    64               .db     %01010000
7433-50          I    65               .db     %01010000
7434-5F          I    66               .db     %01011111
7435-40          I    67               .db     %01000000
7436-7F          I    68               .db     %01111111
7437-00          I    69               .db     %00000000
7438-            I    70
7438-            I    71               ; 07 (Lower right corner)
7438-0A          I    72               .db     %00001010
7439-0A          I    73               .db     %00001010
743A-0A          I    74               .db     %00001010
743B-0A          I    75               .db     %00001010
743C-FA          I    76               .db     %11111010
743D-02          I    77               .db     %00000010
743E-FE          I    78               .db     %11111110
743F-00          I    79               .db     %00000000
7440-            I    80
7440-            I    81               ; 08 (Left line)
7440-50          I    82               .db     %01010000
7441-50          I    83               .db     %01010000
7442-50          I    84               .db     %01010000
7443-50          I    85               .db     %01010000
7444-50          I    86               .db     %01010000
7445-50          I    87               .db     %01010000
7446-50          I    88               .db     %01010000
7447-50          I    89               .db     %01010000
7448-            I    90
7448-            I    91               ; 09 (Right line)
7448-0A          I    92               .db     %00001010
7449-0A          I    93               .db     %00001010
744A-0A          I    94               .db     %00001010
744B-0A          I    95               .db     %00001010
744C-0A          I    96               .db     %00001010
744D-0A          I    97               .db     %00001010
744E-0A          I    98               .db     %00001010
744F-0A          I    99               .db     %00001010
7500                795                       .NO             $7500,$FF
7500-                796       FONT1:  .BI             font1.bin
7800-                797                       .NO             $7800,$FF
7800-                798       FONT2:  .BI             font2.bin
7B00-                799
7C00                800                       .NO             $7C00,$FF
7C00-20 20 20 20 
     20 20 20 20 
     43 61 72 74 
     72 69 64 67 
     65 20 4C 6F 
     61 64 65 72 
     20 20 20 20 
     20 20 20 00     801       TITLE0  .AZ             "        Cartridge Loader       "
7C20-                802                       .NO             $7C20,$00
7C20-20 4E 61 6D 
     65 20 31 00     803       TITLE1: .AZ             " Name 1"
7C40                804                       .NO             $7C40,$00
7C40-20 4E 61 6D 
     65 20 32 00     805       TITLE2: .AZ             " Name 2"
7C60                806                       .NO             $7C60,$00
7C60-20 4E 61 6D 
     65 20 33 00     807       TITLE3: .AZ             " Name 3"
7C80                808                       .NO             $7C80,$00
7C80-20 4E 61 6D 
     65 20 34 00     809       TITLE4: .AZ             " Name 4"
7CA0                810                       .NO             $7CA0,$00
7CA0-20 4E 61 6D 
     65 20 35 00     811       TITLE5: .AZ             " Name 5"
7CC0                812                       .NO             $7CC0,$00
7CC0-20 4E 61 6D 
     65 20 36 00     813       TITLE6: .AZ             " Name 6"
7CE0                814                       .NO             $7CE0,$00
7CE0-20 4E 61 6D 
     65 20 37 00     815       TITLE7: .AZ             " Name 7"
7D00                816                       .NO             $7D00,$00
7D00-20 4E 61 6D 
     65 20 38 00     817       TITLE8: .AZ             " Name 8"
7D20                818                       .NO             $7D20,$00
7D20-20 4E 61 6D 
     65 20 39 00     819       TITLE9: .AZ             " Name 9"
7D40                820                       .NO             $7D40,$00
7D40-                821       TITLE10:
7D40-20 4E 61 6D 
     65 20 41 00     822                       .AZ             " Name A"
7D60                823                       .NO             $7D60,$00
7D60-                824       TITLE11:
7D60-20 4E 61 6D 
     65 20 42 00     825                       .AZ             " Name B"
7D80                826                       .NO             $7D80,$00
7D80-                827       TITLE12:
7D80-20 4E 61 6D 
     65 20 43 00     828                       .AZ             " Name C"
7DA0                829                       .NO             $7DA0,$00
7DA0-                830       TITLE13:
7DA0-20 4E 61 6D 
     65 20 44 00     831                       .AZ             " Name D"
7DC0                832                       .NO             $7DC0,$00
7DC0-                833       TITLE14:
7DC0-20 4E 61 6D 
     65 20 45 00     834                       .AZ             " Name E"
7DE0                835                       .NO             $7DE0,$00
7DE0-                836       TITLE15:
7DE0-20 4E 61 6D 
     65 20 46 00     837                       .AZ             " Name F"
7FFC                838                       .NO             $7FFC,$00
7FFC-                839       SLOT_COUNT:
7FFC-03              840                       .DB             3
7FFD-00              841                       .DB             0
7FFE-00              842                       .DB             0
7FFF-00              843                       .DB             0
