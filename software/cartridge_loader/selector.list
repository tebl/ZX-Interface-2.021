6000-                  4                       .OR             $6000
6000-                  5
6000-                  6                       .IN             constants.asm   ; Constants
4000-            I     1       SCREEN                  .EQU    $4000                   ; 16384
1800-            I     2       SZ_SCRN                 .EQU    $1800                   ; 6144  256*192 pixels, 8-pixels per byte
5800-            I     3       ATTR                    .EQU    $5800                   ; 22528
0300-            I     4       SZ_ATTR                 .EQU    $300                    ; 768   32*24 8-pixel blocks
0060-            I     5       SZ_FONT                 .EQU    $60                             ; 96
5CC0-            I     6       VARS                    .EQU    $5CC0                   ; 23744, used as start of variable space
5F00-            I     7       STACK                   .EQU    $5F00                   ; Stack decrement down from here
0400-            I     8       SIGNATURE               .EQU    $0400                   ; Software signature, used when checking banks.
6000-            I     9
001F-            I    10       CTRL_BANK               .EQU    31                              ; ZX Interface 2.021 bank control port
003F-            I    11       CTRL_LED                .EQU    63                              ; LED for ZX Diagnostic 2.021 cartridge
00FE-            I    12       CTRL_BORDER             .EQU    254                             ; Controls the screen border
6000-            I    13
6000-            I    14       ; Keyboard row definitions
6000-            I    15       ;                                        Bit     0   1 2 3 4
FEFE-            I    16       KR_SH_ZXCV              .EQU    $FEFE                   ;    SHIFT   Z X C V
FBFE-            I    17       KR_QWERT                .EQU    $FBFE                   ;        Q   W E R T
FDFE-            I    18       KR_ASDFG                .EQU    $FDFE                   ;        A   S D F G
F7FE-            I    19       KR_12345                .EQU    $F7FE                   ;        1   2 3 4 5
EFFE-            I    20       KR_09876                .EQU    $EFFE                   ;        0   9 8 7 6
DFFE-            I    21       KR_POIUY                .EQU    $DFFE                   ;        P   O I U Y
BFFE-            I    22       KR_EN_LKJH              .EQU    $BFFE                   ;    ENTER   L K J H
7FFE-            I    23       KR_SP_SY_MNB    .EQU    $7FFE                   ;    SPACE SYM M N B
6000-                  7                       .IN             attributes.asm  ; Attribute definitions
0000-            I     1       A_BLACK         .EQU    %00000000
0001-            I     2       A_BLUE          .EQU    %00000001
0002-            I     3       A_RED           .EQU    %00000010
0003-            I     4       A_MAGENTA       .EQU    %00000011
0004-            I     5       A_GREEN         .EQU    %00000100
0005-            I     6       A_CYAN          .EQU    %00000101
0006-            I     7       A_YELLOW        .EQU    %00000110
0007-            I     8       A_WHITE         .EQU    %00000111
6000-            I     9
0000-            I    10       A_P_BLACK       .EQU    A_BLACK<<3
0008-            I    11       A_P_BLUE        .EQU    A_BLUE<<3
0010-            I    12       A_P_RED         .EQU    A_RED<<3
0018-            I    13       A_P_MAGENTA     .EQU    A_MAGENTA<<3
0020-            I    14       A_P_GREEN       .EQU    A_GREEN<<3
0028-            I    15       A_P_CYAN        .EQU    A_CYAN<<3
0030-            I    16       A_P_YELLOW      .EQU    A_YELLOW<<3
0038-            I    17       A_P_WHITE       .EQU    A_WHITE<<3
6000-            I    18
0040-            I    19       A_BRIGHT        .EQU    %01000000
0080-            I    20       A_FLASH         .EQU    %10000000
6000-                  8
5CC0-                  9       CUR_X   .EQU    VARS+0                  ; Current cursor location on screen, X
5CC1-                 10       CUR_Y   .EQU    VARS+1                  ;  and Y-location.
5CC2-                 11       LAST_A  .EQU    VARS+2                  ; Last attribute used when clearing screen
5CC3-                 12       CUR_IDX .EQU    VARS+3                  ; Index for title selected
5CC4-                 13       LAST_K  .EQU    VARS+4                  ; Last key value in case we need it
5CC5-                 14       SLOTS   .EQU    VARS+5                  ; Number of slots available
6000-                 15
6000-3A 01 7B         16 ( 13) MAIN:   LD              A,(S_BORDER_M)
6003-D3 FE            17 ( 11)                 OUT             (CTRL_BORDER),A
6005-CD 55 60         18 ( 17)                 CALL    GET_SLOT_COUNT  ; Calculate SLOTS value
6008-CD E2 62         19 ( 17)                 CALL    RESET_CURSOR    ; Reset cursor
600B-01 00 04         20 ( 10)                 LD              BC,$0400                ; Set up the custom delay routine,
600E-11 00 01         21 ( 10)                 LD              DE,$0100                ;  mainly so that we have time to
6011-CD 38 60         22 ( 17)                 CALL    CUSTOM_DELAY    ;  actually see loader boot screen.
6014-CD 8A 60         23 ( 17)                 CALL    SELECTOR                ; Show selection screen
6017-CD B3 61         24 ( 17) .LOOP:  CALL    READ_INPUT              ; Read keyboard
601A-18 FB            25 ( 12)                 JR              .LOOP                   ; Loop forever.
601C-                 26
601C-                 27       LIB_DELAY:
601C-                 28                       .IN             lib_delay.asm
601C-            I     1       ;
601C-            I     2       ; Performs a simple 16-bit delay loop. I've got no idea of the actual timings,
601C-            I     3       ; but it feels like a little over a second.
601C-            I     4       ;
601C-C5          I     5 ( 11) DELAY:  PUSH    BC
601D-D5          I     6 ( 11)                 PUSH    DE
601E-01 00 04    I     7 ( 10)                 LD              BC,$0400
6021-11 00 01    I     8 ( 10)                 LD              DE,$0100
6024-CD 38 60    I     9 ( 17)                 CALL    CUSTOM_DELAY
6027-D1          I    10 ( 10)                 POP             DE
6028-C1          I    11 ( 10)                 POP             BC
6029-C9          I    12 ( 10)                 RET
602A-            I    13
602A-            I    14       KEY_DELAY:
602A-C5          I    15 ( 11)                 PUSH    BC
602B-D5          I    16 ( 11)                 PUSH    DE
602C-01 55 00    I    17 ( 10)                 LD              BC,$0055
602F-11 55 00    I    18 ( 10)                 LD              DE,$0055
6032-CD 38 60    I    19 ( 17)                 CALL    CUSTOM_DELAY
6035-D1          I    20 ( 10)                 POP             DE
6036-C1          I    21 ( 10)                 POP             BC
6037-C9          I    22 ( 10)                 RET
6038-            I    23
6038-            I    24
6038-            I    25       ;
6038-            I    26       ; Custom delay routine, uses just about anything to burn as many cycles as
6038-            I    27       ; possible. Load BC for an outer loop count, DE for an inner loop to control
6038-            I    28       ; how much time this routine uses. For the exact timings, someone'd need to
6038-            I    29       ; count the cycles and divide it by CPU frequency.
6038-            I    30       ;
6038-            I    31       CUSTOM_DELAY:
6038-C5          I    32 ( 11)                 PUSH    BC                              ; Save current registers, mainly because we
6039-D5          I    33 ( 11)                 PUSH    DE                              ; overwrite just about anything and we need
603A-F5          I    34 ( 11)                 PUSH    AF                              ; the calling routines to stay working.
603B-E5          I    35 ( 11)                 PUSH    HL
603C-7A          I    36 (  4)                 LD              A,D                             ; Let's save the starting value of DE - there's
603D-67          I    37 (  4)                 LD              H,A                             ; probably an easier way, but that requires
603E-7B          I    38 (  4)                 LD              A,E                             ; reading.
603F-6F          I    39 (  4)                 LD              L,A
6040-7C          I    40 (  4) .OUTER: LD              A,H                             ; Restore initial DE value
6041-57          I    41 (  4)                 LD              D,A
6042-7D          I    42 (  4)                 LD              A,L
6043-5F          I    43 (  4)                 LD              E,A
6044-1B          I    44 (  6) .INNER: DEC             DE
6045-7A          I    45 (  4)                 LD              A,D                             ; Decrementing DE does not set Z-flag, so we'll
6046-B3          I    46 (  4)                 OR              E                               ;  need to do do this. It's a quirk.
6047-C2 44 60    I    47 ( 10)                 JP              NZ,.INNER               ; If DE not 0, then do inner loop again.
604A-0B          I    48 (  6)                 DEC             BC                              ; Z-flag. Again.
604B-78          I    49 (  4)                 LD              A,B
604C-B1          I    50 (  4)                 OR              C
604D-C2 40 60    I    51 ( 10)                 JP              NZ,.OUTER               ; If BE not 0, then do outer loop again.
6050-E1          I    52 ( 10)                 POP             HL                              ; Restore registers that were overwritten.
6051-F1          I    53 ( 10)                 POP             AF
6052-D1          I    54 ( 10)                 POP             DE
6053-C1          I    55 ( 10)                 POP             BC
6054-C9          I    56 ( 10)                 RET
6055-                 29
6055-                 30       ;
6055-                 31       ; Performs an initial calculation to figure out how many slots we need to
6055-                 32       ; display on the screen. There is a maximum of 4 different values to account
6055-                 33       ; for the four chip selects on cartridge port. CUR_IDX will be a value between
6055-                 34       ; 1 and this calculated value.
6055-                 35       ;
6055-                 36       GET_SLOT_COUNT:
6055-21 FC 7F         37 ( 10)                 LD              HL,SLOT_COUNT
6058-06 04            38 (  7)                 LD              B,4
605A-3E 00            39 (  7)                 LD              A,0
605C-86               40 (  7) .NEXT:  ADD             (HL)
605D-23               41 (  6)                 INC             HL
605E-05               42 (  4)                 DEC             B
605F-20 FB            43 ( 7+)                 JR              NZ,.NEXT
6061-32 C5 5C         44 ( 13)                 LD              (SLOTS),A
6064-C9               45 ( 10)                 RET
6065-                 46
6065-                 47       ;
6065-                 48       ; Error screen display.
6065-                 49       ;
6065-3A 08 7B         50 ( 13) ERROR:  LD              A,(S_ERROR)             ; Load error screen attribute definition,
6068-CD D8 63         51 ( 17)                 CALL    CLR_BG                  ;  and clear the screen with it.
606B-                 52
606B-                 53                       ; Outputs the title block
606B-11 94 64         54 ( 10)                 LD              DE,ERR_TITLE
606E-3A 09 7B         55 ( 13)                 LD              A,(S_ERROR_TITLE)
6071-4F               56 (  4)                 LD              C,A
6072-3A 08 7B         57 ( 13)                 LD              A,(S_ERROR)
6075-47               58 (  4)                 LD              B,A
6076-CD E7 60         59 ( 17)                 CALL    TITLE_BOX
6079-                 60
6079-                 61                       ; Error message section
6079-CD 89 63         62 ( 17)                 CALL    SET_FONT2               ; Set regular font
607C-21 0A 00         63 ( 10)                 LD              HL,$000A
607F-CD EB 62         64 ( 17)                 CALL    SET_CURSOR
6082-21 B4 64         65 ( 10)                 LD              HL,ERR_MSG
6085-CD A7 63         66 ( 17)                 CALL    PUTS
6088-18 FE            67 ( 12) .LOOP:  JR              .LOOP                   ; Loop forever.
608A-                 68
608A-                 69       ;
608A-                 70       ; Selection screen display
608A-                 71       ;
608A-                 72       SELECTOR:
608A-3E 01            73 (  7)                 LD              A,1                             ; Initialize title index
608C-32 C3 5C         74 ( 13)                 LD              (CUR_IDX),A             ;  save in RAM for later.
608F-3A 02 7B         75 ( 13)                 LD              A,(S_DEFAULT)   ; Get default attribute value
6092-CD D8 63         76 ( 17)                 CALL    CLR_BG                  ;  and clear screen with it.
6095-                 77
6095-                 78                       ; Outputs the title block
6095-11 00 7C         79 ( 10)                 LD              DE,TITLE0
6098-3A 03 7B         80 ( 13)                 LD              A,(S_TITLE)
609B-47               81 (  4)                 LD              B,A
609C-3A 04 7B         82 ( 13)                 LD              A,(S_NAME)
609F-4F               83 (  4)                 LD              C,A
60A0-CD E7 60         84 ( 17)                 CALL    TITLE_BOX
60A3-                 85
60A3-                 86                       ; Output bank names
60A3-CD 60 61         87 ( 17)                 CALL    UPDATE_TITLES
60A6-                 88
60A6-                 89                       ; Output help section
60A6-3A 07 7B         90 ( 13) .HELP:  LD              A,(S_HELP)
60A9-21 15 00         91 ( 10)                 LD              HL,$0015
60AC-CD EB 62         92 ( 17)                 CALL    SET_CURSOR
60AF-CD 4F 63         93 ( 17)                 CALL    SET_ATTR_ROW
60B2-21 16 00         94 ( 10)                 LD              HL,$0016
60B5-CD EB 62         95 ( 17)                 CALL    SET_CURSOR
60B8-CD 4F 63         96 ( 17)                 CALL    SET_ATTR_ROW
60BB-                 97
60BB-CD 85 63         98 ( 17)                 CALL    SET_FONT1
60BE-21 54 64         99 ( 10)                 LD              HL,MSG_HELP
60C1-CD A7 63        100 ( 17)                 CALL    PUTS
60C4-21 17 00        101 ( 10)                 LD              HL,$0017
60C7-CD EB 62        102 ( 17)                 CALL    SET_CURSOR
60CA-CD 4F 63        103 ( 17)                 CALL    SET_ATTR_ROW
60CD-                104                       ; Print symbols over text as those aren't in the default font.
60CD-11 00 74        105 ( 10)                 LD              DE, FONT_SYMBOLS
60D0-21 16 04        106 ( 10)                 LD              HL,$0416
60D3-CD EB 62        107 ( 17)                 CALL    SET_CURSOR
60D6-3E 00           108 (  7)                 LD              A,0
60D8-CD 66 63        109 ( 17)                 CALL    SET_SYMBOL
60DB-21 16 0B        110 ( 10)                 LD              HL,$0B16
60DE-CD EB 62        111 ( 17)                 CALL    SET_CURSOR
60E1-3E 01           112 (  7)                 LD              A,1
60E3-CD 66 63        113 ( 17)                 CALL    SET_SYMBOL
60E6-C9              114 ( 10)                 RET
60E7-                115
60E7-                116       ;
60E7-                117       ; The title box fiddles around with a lot of symbols to make it look pretty,
60E7-                118       ; so to avoid copying the code we'll generalize it instead.
60E7-                119       ;  DE - Load with screen title address
60E7-                120       ;  B  - Load with title attribute
60E7-                121       ;  C  - Load with cartridge name attribute
60E7-                122       ;
60E7-                123       TITLE_BOX:
60E7-D5              124 ( 11)                 PUSH    DE                              ; Save DE as it points to the title.
60E8-78              125 (  4) .TEXT:  LD              A,B                             ; B holds title attribute
60E9-CD 85 63        126 ( 17)                 CALL    SET_FONT1               ; Set title font
60EC-21 01 00        127 ( 10)                 LD              HL,$0001
60EF-CD EB 62        128 ( 17)                 CALL    SET_CURSOR
60F2-CD 4F 63        129 ( 17)                 CALL    SET_ATTR_ROW
60F5-21 33 64        130 ( 10)                 LD              HL,MSG_TITLE
60F8-CD A7 63        131 ( 17)                 CALL    PUTS
60FB-21 02 00        132 ( 10)                 LD              HL,$0002
60FE-CD EB 62        133 ( 17)                 CALL    SET_CURSOR
6101-79              134 (  4)                 LD              A,C                             ; C holds cartridge name style
6102-CD 4F 63        135 ( 17)                 CALL    SET_ATTR_ROW
6105-E1              136 ( 10)                 POP             HL                              ; Restore previously pushed DE to HL
6106-CD A7 63        137 ( 17)                 CALL    PUTS                    ;  and use it to output the string.
6109-                138
6109-                139       .SYMBOLS:
6109-78              140 (  4)                 LD              A,B
610A-11 00 74        141 ( 10)                 LD              DE,FONT_SYMBOLS ; Set font to point to the symbols
610D-21 00 00        142 ( 10)                 LD              HL,$0000                ; Reset cursor to
6110-CD EB 62        143 ( 17)                 CALL    SET_CURSOR              ;  start of the screen.
6113-CD 4F 63        144 ( 17)                 CALL    SET_ATTR_ROW    ; Update entire row with style.
6116-21 F1 63        145 ( 10)                 LD              HL,MSG_TB_UPPER
6119-CD BA 63        146 ( 17)                 CALL    PUTSS                   ; Print upper title bar
611C-21 03 00        147 ( 10)                 LD              HL,$0003
611F-CD EB 62        148 ( 17)                 CALL    SET_CURSOR
6122-CD 4F 63        149 ( 17)                 CALL    SET_ATTR_ROW
6125-21 12 64        150 ( 10)                 LD              HL,MSG_TB_LOWER ; Print lower title bar
6128-CD BA 63        151 ( 17)                 CALL    PUTSS
612B-21 01 00        152 ( 10)                 LD              HL,$0001                ; Fix left title bar
612E-CD EB 62        153 ( 17)                 CALL    SET_CURSOR
6131-3E 08           154 (  7)                 LD              A,$08
6133-CD 66 63        155 ( 17)                 CALL    SET_SYMBOL
6136-21 02 00        156 ( 10)                 LD              HL,$0002
6139-CD EB 62        157 ( 17)                 CALL    SET_CURSOR
613C-3E 08           158 (  7)                 LD              A,$08
613E-CD 66 63        159 ( 17)                 CALL    SET_SYMBOL
6141-78              160 (  4)                 LD              A,B
6142-CD 48 63        161 ( 17)                 CALL    SET_ATTR
6145-21 01 1F        162 ( 10)                 LD              HL,$1F01                ; Fix right title bar
6148-CD EB 62        163 ( 17)                 CALL    SET_CURSOR
614B-3E 09           164 (  7)                 LD              A,$09
614D-CD 66 63        165 ( 17)                 CALL    SET_SYMBOL
6150-21 02 1F        166 ( 10)                 LD              HL,$1F02
6153-CD EB 62        167 ( 17)                 CALL    SET_CURSOR
6156-3E 09           168 (  7)                 LD              A,$09
6158-CD 66 63        169 ( 17)                 CALL    SET_SYMBOL
615B-78              170 (  4)                 LD              A,B
615C-CD 48 63        171 ( 17)                 CALL    SET_ATTR
615F-C9              172 ( 10) .DONE:  RET
6160-                173
6160-                174       ;
6160-                175       ; Updates the names of titles displayed as well as their attributes. Sort of
6160-                176       ; slow for just marking the active line, but too lazy to build a separate one
6160-                177       ; for just the attributes.
6160-                178       ;
6160-                179       UPDATE_TITLES:
6160-F5              180 ( 11)                 PUSH    AF
6161-C5              181 ( 11)                 PUSH    BC
6162-CD 89 63        182 ( 17)                 CALL    SET_FONT2
6165-3A C5 5C        183 ( 13)                 LD              A,(SLOTS)       ; Load number of titles configured.
6168-47              184 (  4)                 LD              B,A
6169-78              185 (  4) .NEXT:  LD              A,B
616A-CD 73 61        186 ( 17)                 CALL    PRINT_TITLE_N
616D-05              187 (  4)                 DEC             B
616E-20 F9           188 ( 7+)                 JR              NZ,.NEXT
6170-C1              189 ( 10)                 POP             BC
6171-F1              190 ( 10)                 POP             AF
6172-C9              191 ( 10)                 RET
6173-                192
6173-                193       ;
6173-                194       ; Prints bank titles to their corresponding line number, value in A is used as
6173-                195       ; bank index.
6173-                196       ;
6173-                197       PRINT_TITLE_N:
6173-E5              198 ( 11)                 PUSH    HL
6174-F5              199 ( 11)                 PUSH    AF                              ; Store title index
6175-21 00 00        200 ( 10)                 LD              HL,$0000                ; Start calculation at 0,0
6178-C6 04           201 (  7)                 ADD             A,4                             ;  add 4 to get screen line to print to,
617A-6F              202 (  4)                 LD              L,A                             ;  then set this as Y-coordinate.
617B-CD EB 62        203 ( 17)                 CALL    SET_CURSOR              ; Update cursor
617E-F1              204 ( 10)                 POP             AF                              ; Get back the original index
617F-CD 8A 61        205 ( 17)                 CALL    SET_HIGHLIGHT   ; Set background color depending on index
6182-CD A3 61        206 ( 17)                 CALL    GET_TITLE_ADDR  ; Get title string
6185-CD A7 63        207 ( 17)                 CALL    PUTS                    ; Print it.
6188-E1              208 ( 10)                 POP     HL
6189-C9              209 ( 10)                 RET
618A-                210
618A-                211       ;
618A-                212       ; With the currently being processed index in A, compare that to the actually
618A-                213       ; selected bank index. Change attribute data for the entire row to show the
618A-                214       ; difference.
618A-                215       ;
618A-                216       SET_HIGHLIGHT:
618A-D5              217 ( 11)                 PUSH    DE
618B-F5              218 ( 11)                 PUSH    AF
618C-C5              219 ( 11)                 PUSH    BC
618D-47              220 (  4)                 LD              B,A
618E-3A C3 5C        221 ( 13)                 LD              A,(CUR_IDX)
6191-B8              222 (  4)                 CP              A,B                             ; Check if current index?
6192-20 05           223 ( 7+)                 JR              NZ,.INACTIVE    ;  no, jump to inactive
6194-3A 06 7B        224 ( 13)                 LD              A,(S_ACTIVE)    ;  yes, so set attribute style to selected.
6197-18 03           225 ( 12)                 JR              .SET_ROW
6199-                226       .INACTIVE:
6199-3A 05 7B        227 ( 13)                 LD              A,(S_INACTIVE)
619C-                228       .SET_ROW:
619C-CD 4F 63        229 ( 17)                 CALL    SET_ATTR_ROW
619F-C1              230 ( 10)                 POP             BC
61A0-F1              231 ( 10)                 POP             AF
61A1-D1              232 ( 10)                 POP             DE
61A2-C9              233 ( 10)                 RET
61A3-                234
61A3-                235       ;
61A3-                236       ; Get the memory address of the bank title, as indicated by the value in A.
61A3-                237       ; This works based on the fact that we chose to use 32 bytes for each of the
61A3-                238       ; title strings (this includes $00 termination, so 31 characters max for
61A3-                239       ; each of them).
61A3-                240       ;
61A3-                241       GET_TITLE_ADDR:
61A3-F5              242 ( 11)                 PUSH    AF
61A4-0F              243 (  4)                 RRCA                                    ; Multiply by 32
61A5-0F              244 (  4)                 RRCA
61A6-0F              245 (  4)                 RRCA
61A7-6F              246 (  4)                 LD              L,A                             ; Store as low byte
61A8-E6 03           247 (  7)                 AND             3                               ; Mask bits for high byte
61AA-C6 7C           248 (  7)                 ADD             A,$7C                   ;  and with first string address ($7C00)
61AC-67              249 (  4)                 LD              H,A                             ; High byte done.
61AD-7D              250 (  4)                 LD              A,L                             ; Get back x*32
61AE-E6 E0           251 (  7)                 AND             $E0
61B0-6F              252 (  4)                 LD              L,A                             ; Put in L.
61B1-F1              253 ( 10)                 POP             AF
61B2-C9              254 ( 10)                 RET
61B3-                255       ;
61B3-                256       ; Initial routine for handle keyboard input.
61B3-                257       ;
61B3-                258       READ_INPUT:
61B3-E5              259 ( 11)                 PUSH    HL
61B4-CD D6 61        260 ( 17) .JOY1:  CALL    READ_JOY1               ; Read joystick 1, sets Z if no keys pressed.
61B7-28 02           261 ( 7+)                 JR              Z,.JOY2                 ;  Check next joystick on no keys in use.
61B9-18 14           262 ( 12)                 JR              .DONE                   ;  Done for now if we've detected a key.
61BB-CD 12 62        263 ( 17) .JOY2:  CALL    READ_JOY2               ; Read joystick 1, sets Z if no keys pressed.
61BE-28 02           264 ( 7+)                 JR              Z,.CHK_Q                ;  No keys pressed, so we go check Q instead.
61C0-18 0D           265 ( 12)                 JR              .DONE                   ;  Done for now if we've detected a key.
61C2-01 FE FB        266 ( 10) .CHK_Q: LD              BC,KR_QWERT             ; Check for Q key
61C5-CD D1 61        267 ( 17)                 CALL    READ_ROW                ; Read corresponding keyboard row.
61C8-E6 01           268 (  7)                 AND             %00000001               ; Is Q pressed?
61CA-20 03           269 ( 7+)                 JR              NZ,.DONE                ;  No, then we are done.
61CC-C3 DC 62        270 ( 10)                 JP              START_BASIC             ;  Yes, then we go start ZX Basic.
61CF-E1              271 ( 10) .DONE:  POP             HL
61D0-C9              272 ( 10)                 RET
61D1-                273
61D1-                274       ;
61D1-                275       ; Read keyboard row as indicated by the BC registers, value
61D1-                276       ; will be put in A. Note that due to Z80 quirkiness, the
61D1-                277       ; entire BC value (address) will be put on the address bus.
61D1-                278       ;
61D1-                279       READ_ROW:
61D1-ED 78           280 ( 12)                 IN              A,(C)
61D3-E6 1F           281 (  7)                 AND             %00011111               ; Mask out floating bits
61D5-C9              282 ( 10)                 RET
61D6-                283
61D6-                284       ;
61D6-                285       ; Handles a detected key press, but we delay exectution until
61D6-                286       ; we've detected the release of the key (mostly to avoid having to
61D6-                287       ; deal with key repeat delays).
61D6-                288       ;
61D6-                289       READ_JOY1:
61D6-C5              290 ( 11)                 PUSH    BC
61D7-01 FE EF        291 ( 10)                 LD              BC,KR_09876             ; Keys 6 through 9
61DA-CD D1 61        292 ( 17)                 CALL    READ_ROW                ; Read row,
61DD-FE 1F           293 (  7)                 CP              %00011111               ;  check if no keys are pressed?
61DF-28 2D           294 ( 7+)                 JR              Z,.DONE                 ; Yes, so we go check Q instead.
61E1-                295
61E1-D5              296 ( 11)                 PUSH    DE
61E2-32 C4 5C        297 ( 13)                 LD              (LAST_K),A              ; Store key for later
61E5-CD 2A 60        298 ( 17) .AGAIN: CALL    KEY_DELAY
61E8-CD D1 61        299 ( 17)                 CALL    READ_ROW                ; Read row again, and then
61EB-FE 1F           300 (  7)                 CP              %00011111               ;  check if no keys are pressed?
61ED-28 02           301 ( 7+)                 JR              Z,.RELEASED             ; Yes, so go do something.
61EF-18 F4           302 ( 12)                 JR              .AGAIN
61F1-                303       .RELEASED:
61F1-D1              304 ( 10)                 POP             DE
61F2-3A C4 5C        305 ( 13)                 LD              A,(LAST_K)              ; Read it back again.
61F5-FE 1D           306 (  7) .CHK_9: CP              %00011101               ; Bit 1 is zero for UP
61F7-20 05           307 ( 7+)                 JR              NZ,.CHK_8               ; Next key, unless we have a match.
61F9-CD 4C 62        308 ( 17)                 CALL    MOVE_UP
61FC-18 10           309 ( 12)                 JR              .DONE
61FE-FE 1B           310 (  7) .CHK_8: CP              %00011011               ; Bit 2 is zero for DOWN
6200-20 05           311 ( 7+)                 JR              NZ,.CHK_0               ; Next key, unless we have a match.
6202-CD 5D 62        312 ( 17)                 CALL    MOVE_DOWN
6205-18 07           313 ( 12)                 JR              .DONE
6207-FE 1E           314 (  7) .CHK_0: CP              %00011110               ; Bit 0 is zero for FIRE
6209-20 03           315 ( 7+)                 JR              NZ,.DONE                ; Done checking, unless we have a match.
620B-CD 73 62        316 ( 17)                 CALL    PRESS_FIRE
620E-C1              317 ( 10) .DONE:  POP             BC
620F-FE 1F           318 (  7)                 CP              %00011111               ; Update Z-flag to indicate no key
6211-C9              319 ( 10)                 RET
6212-                320
6212-                321       ;
6212-                322       ; Handles a detected key press, but we delay exectution until
6212-                323       ; we've detected the release of the key (mostly to avoid having to
6212-                324       ; deal with key repeat delays).
6212-                325       ;
6212-                326       READ_JOY2:
6212-C5              327 ( 11)                 PUSH    BC
6213-01 FE F7        328 ( 10)                 LD              BC,KR_12345             ; Keys 1 through 5
6216-CD D1 61        329 ( 17)                 CALL    READ_ROW                ; Read row,
6219-FE 1F           330 (  7)                 CP              %00011111               ;  check if no keys are pressed?
621B-28 2D           331 ( 7+)                 JR              Z,.DONE                 ; Yes, so we go check Q instead.
621D-                332
621D-D5              333 ( 11)                 PUSH    DE
621E-32 C4 5C        334 ( 13)                 LD              (LAST_K),A              ; Store key for later
6221-CD 2A 60        335 ( 17) .AGAIN: CALL    KEY_DELAY
6224-CD D1 61        336 ( 17)                 CALL    READ_ROW                ; Read row again, and then
6227-FE 1F           337 (  7)                 CP              %00011111               ;  check if all keys released.
6229-28 02           338 ( 7+)                 JR              Z,.RELEASED             ; Yes, so go do something.
622B-18 F4           339 ( 12)                 JR              .AGAIN
622D-                340       .RELEASED:
622D-D1              341 ( 10)                 POP             DE
622E-3A C4 5C        342 ( 13)                 LD              A,(LAST_K)              ; Read it back again.
6231-FE 17           343 (  7) .CHK_4: CP              %00010111               ; Bit 3 is zero for UP
6233-20 05           344 ( 7+)                 JR              NZ,.CHK_3               ; Next key, unless we have a match.
6235-CD 4C 62        345 ( 17)                 CALL    MOVE_UP
6238-18 10           346 ( 12)                 JR              .DONE
623A-FE 1B           347 (  7) .CHK_3: CP              %00011011               ; Bit 2 is zero for DOWN
623C-20 05           348 ( 7+)                 JR              NZ,.CHK_5               ; Next key, unless we have a match.
623E-CD 5D 62        349 ( 17)                 CALL    MOVE_DOWN
6241-18 07           350 ( 12)                 JR              .DONE
6243-FE 0F           351 (  7) .CHK_5: CP              %00001111               ; Bit 4 is zero for FIRE
6245-20 03           352 ( 7+)                 JR              NZ,.DONE                ; Done checking, unless we have a match.
6247-CD 73 62        353 ( 17)                 CALL    PRESS_FIRE
624A-C1              354 ( 10) .DONE:  POP             BC
624B-C9              355 ( 10)                 RET
624C-                356
624C-                357       ;
624C-                358       ; Move selection up, decrementing the index as we go. The code ensures that
624C-                359       ; we don't go past the minimum value of of 1 (bank 0 is this program).
624C-                360       ;
624C-                361       MOVE_UP:
624C-F5              362 ( 11)                 PUSH    AF
624D-3A C3 5C        363 ( 13)                 LD              A,(CUR_IDX)             ; Load current index number.
6250-                364
6250-FE 01           365 (  7)                 CP              1                               ; Already at minimum index?
6252-28 04           366 ( 7+)                 JR              Z,.DONE                 ; Yes, then we are done.
6254-3D              367 (  4)                 DEC             A                               ; No, so let's bump it up one position.
6255-32 C3 5C        368 ( 13)                 LD              (CUR_IDX),A
6258-CD 60 61        369 ( 17) .DONE:  CALL    UPDATE_TITLES   ; Update the titles with highlight.
625B-F1              370 ( 10)                 POP             AF
625C-C9              371 ( 10)                 RET
625D-                372
625D-                373       ;
625D-                374       ; Move selection down, incrementing the index as far as we can go. This value
625D-                375       ; comes from the SLOTS variable, initially calculated from the values entered
625D-                376       ; in NUM_TITLES at the end of the image. We need to do this so that we can't
625D-                377       ; go past the size of the actual EEPROM.
625D-                378       ;
625D-                379       MOVE_DOWN:
625D-F5              380 ( 11)                 PUSH    AF
625E-C5              381 ( 11)                 PUSH    BC
625F-3A C5 5C        382 ( 13)                 LD              A,(SLOTS)               ; Get the maximum number we can have,
6262-47              383 (  4)                 LD              B,A                             ;  save it in C for later comparison.
6263-3A C3 5C        384 ( 13)                 LD              A,(CUR_IDX)             ; Load current index number.
6266-                385
6266-B8              386 (  4)                 CP              B                               ; Already at maximum index?
6267-28 04           387 ( 7+)                 JR              Z,.DONE                 ; Yes, then we are done.
6269-3C              388 (  4)                 INC             A                               ; No, so let's bump it up one position.
626A-32 C3 5C        389 ( 13)                 LD              (CUR_IDX),A
626D-CD 60 61        390 ( 17) .DONE:  CALL    UPDATE_TITLES   ; Update the titles with highlight.
6270-C1              391 ( 10)                 POP             BC
6271-F1              392 ( 10)                 POP             AF
6272-C9              393 ( 10)                 RET
6273-                394
6273-                395       ;
6273-                396       ; The fire button has been pushed, so we'll attempt to perform bank switching.
6273-                397       ;
6273-                398       PRESS_FIRE:
6273-F5              399 ( 11)                 PUSH    AF
6274-C5              400 ( 11)                 PUSH    BC
6275-E5              401 ( 11)                 PUSH    HL
6276-D5              402 ( 11)                 PUSH    DE
6277-                403
6277-CD 91 62        404 ( 17)                 CALL    GET_BANK_IDENTIFIER
627A-7C              405 (  4)                 LD              A,H                             ; Bank identifier in A
627B-45              406 (  4)                 LD              B,L                             ; Chip identifier in B
627C-CB 10           407 (  8)                 RL              B                               ; Shift CS value into correct position, these
627E-CB 10           408 (  8)                 RL              B                               ;  should be bit 6 and 7 on the bank switching
6280-CB 10           409 (  8)                 RL              B                               ;  register.
6282-CB 10           410 (  8)                 RL              B
6284-CB 10           411 (  8)                 RL              B
6286-CB 10           412 (  8)                 RL              B
6288-80              413 (  4)                 ADD             B                               ; Add slot number to it
6289-                414
6289-CD BE 62        415 ( 17)                 CALL    SET_BANK
628C-                416
628C-D1              417 ( 10)                 POP             DE
628D-E1              418 ( 10)                 POP             HL
628E-C1              419 ( 10)                 POP             BC
628F-F1              420 ( 10)                 POP             AF
6290-C9              421 ( 10)                 RET                                             ; We should never be able to get here.
6291-                422
6291-                423       ;
6291-                424       ; Converts the current slot index into a value suitable for use with the
6291-                425       ; bank switching scheme, this is mostly complicated due to the four counters
6291-                426       ; used. On return H will hold bank value, L will indicate the chip identifier.
6291-                427       ;
6291-                428       GET_BANK_IDENTIFIER:
6291-F5              429 ( 11)                 PUSH    AF
6292-C5              430 ( 11)                 PUSH    BC
6293-D5              431 ( 11)                 PUSH    DE
6294-                432
6294-21 FC 7F        433 ( 10)                 LD              HL,SLOT_COUNT
6297-0E 04           434 (  7)                 LD              C,4
6299-3A C3 5C        435 ( 13)                 LD              A,(CUR_IDX)
629C-57              436 (  4)                 LD              D,A
629D-3E 00           437 (  7)                 LD              A,0
629F-1E 00           438 (  7)                 LD              E,0
62A1-                439       .NEXT_CHIP:
62A1-46              440 (  7)                 LD              B,(HL)
62A2-1E 00           441 (  7)                 LD              E,0
62A4-1C              442 (  4) .NEXT:  INC             E
62A5-3C              443 (  4)                 INC     A
62A6-BA              444 (  4)                 CP              D
62A7-28 07           445 ( 7+)                 JR              Z,.DONE
62A9-                446
62A9-05              447 (  4)                 DEC             B
62AA-20 F8           448 ( 7+)                 JR              NZ,.NEXT
62AC-                449
62AC-23              450 (  6)                 INC             HL
62AD-0D              451 (  4)                 DEC             C
62AE-20 F1           452 ( 7+)                 JR              NZ,.NEXT_CHIP
62B0-                453
62B0-                454       .DONE:
62B0-3E 04           455 (  7)                 LD              A,4
62B2-91              456 (  4)                 SUB             C
62B3-47              457 (  4)                 LD              B,A
62B4-20 01           458 ( 7+)                 JR              NZ,.OFFSET_LOADER
62B6-1C              459 (  4)                 INC             E
62B7-                460       .OFFSET_LOADER:
62B7-1D              461 (  4)                 DEC             E
62B8-63              462 (  4)                 LD              H,E
62B9-6F              463 (  4)                 LD              L,A
62BA-                464
62BA-D1              465 ( 10)                 POP             DE
62BB-C1              466 ( 10)                 POP             BC
62BC-F1              467 ( 10)                 POP             AF
62BD-C9              468 ( 10)                 RET
62BE-                469
62BE-                470       ;
62BE-                471       ; Configures bank switching according to value in A. Before restarting at
62BE-                472       ; $0000 to start the bank that has been switched in, we'll try to ensure
62BE-                473       ; that the bank was actually switched - this is done by looking for a text
62BE-                474       ; signature at $0400. After switching the first two bytes probably shouldn't
62BE-                475       ; match 'Z' and 'X'.
62BE-                476       ;
62BE-                477       SET_BANK:
62BE-F3              478 (  4)                 DI                                              ; Disable interrupts
62BF-0E 3F           479 (  7)                 LD              C,CTRL_LED              ; Controls LEDs found on ZX Diagnostic 2.021
62C1-ED 79           480 ( 12)                 OUT             (C),A                   ;  so let's just write the value to it.
62C3-0E 1F           481 (  7)                 LD              C,CTRL_BANK             ; Port used for controlling the bank switching
62C5-ED 79           482 ( 12)                 OUT             (C),A                   ;  we write the same value.
62C7-21 00 04        483 ( 10) .CHECK: LD              HL,SIGNATURE    ; Banks should now have been switched around,
62CA-7E              484 (  7)                 LD              A,(HL)                  ;  but in order to make sure we'll check.
62CB-FE 5A           485 (  7)                 CP              'Z'
62CD-20 09           486 ( 7+)                 JR              NZ,.OK
62CF-23              487 (  6)                 INC             HL
62D0-7E              488 (  7)                 LD              A,(HL)
62D1-FE 58           489 (  7)                 CP              'X'
62D3-20 03           490 ( 7+)                 JR              NZ,.OK
62D5-C3 65 60        491 ( 10) .ERROR: JP              ERROR                   ; Jump out of main loop and set error screen.
62D8-C3 00 00        492 ( 10) .OK:    JP              $0000                   ; Looks good, so we'll just start from the bank.
62DB-C9              493 ( 10)                 RET                                             ; We should never be able to get here.
62DC-                494
62DC-                495       ;
62DC-                496       ; Start ZX Basic. This is done by attempting to deactivate the bank switching
62DC-                497       ; hardware, then before restarting at $0000 a check will be made to see that
62DC-                498       ; the loader ROM has disappeared.
62DC-                499       ;
62DC-                500       START_BASIC:
62DC-3E 20           501 (  7)                 LD              A,%00100000             ; Bit 5 disables bank switching.
62DE-CD BE 62        502 ( 17)                 CALL    SET_BANK                ; Try to do it.
62E1-C9              503 ( 10)                 RET                                             ; We should never be able to get here.
62E2-                504
62E2-                505       ;
62E2-                506       ; Reset cursor position.
62E2-                507       ;
62E2-                508       RESET_CURSOR:
62E2-3E 00           509 (  7)                 LD              A,0
62E4-32 C0 5C        510 ( 13)                 LD              (CUR_X),A
62E7-32 C1 5C        511 ( 13)                 LD              (CUR_Y),A
62EA-C9              512 ( 10)                 RET
62EB-                513
62EB-                514       ;
62EB-                515       ; Set cursor position, HL register is treated as X,Y character coordinates.
62EB-                516       ; Example:
62EB-                517       ;               LD A,$0102 will set X=1 and Y=2
62EB-                518       ;
62EB-                519       SET_CURSOR:
62EB-F5              520 ( 11)                 PUSH    AF
62EC-7C              521 (  4)                 LD              A,H
62ED-32 C0 5C        522 ( 13)                 LD              (CUR_X),A
62F0-7D              523 (  4)                 LD              A,L
62F1-32 C1 5C        524 ( 13)                 LD              (CUR_Y),A
62F4-F1              525 ( 10)                 POP             AF
62F5-C9              526 ( 10)                 RET
62F6-                527
62F6-                528       ;
62F6-                529       ; Loads cursor into HL register, this moves data in exactly the opposite
62F6-                530       ; way as SET_CURSOR.
62F6-                531       ;
62F6-                532       GET_CURSOR:
62F6-F5              533 ( 11)                 PUSH    AF
62F7-3A C0 5C        534 ( 13)                 LD              A,(CUR_X)
62FA-67              535 (  4)                 LD              H,A
62FB-3A C1 5C        536 ( 13)                 LD              A,(CUR_Y)
62FE-6F              537 (  4)                 LD              L,A
62FF-F1              538 ( 10)                 POP             AF
6300-C9              539 ( 10)                 RET
6301-                540
6301-                541       ;
6301-                542       ; Increment cursor position. While the screen attribute memory is organized
6301-                543       ; as expected, the RAM used for the pixel data is not - so we need to track
6301-                544       ; when we cross over from one line into the next.
6301-                545       ;
6301-                546       INC_CURSOR:
6301-F5              547 ( 11)                 PUSH    AF                              ; Save AF for when I forget it
6302-3A C0 5C        548 ( 13)                 LD              A,(CUR_X)
6305-FE 1F           549 (  7)                 CP              32-1                    ; Check if in last column
6307-38 07           550 ( 7+)                 JR              C,.INC_X                ; no, just increment X
6309-3E 00           551 (  7)                 LD              A,0                             ; yes, so we:
630B-32 C0 5C        552 ( 13)                 LD              (CUR_X),A               ;   reset X
630E-18 09           553 ( 12)                 JR              .INC_Y                  ;   increment Y
6310-3A C0 5C        554 ( 13) .INC_X: LD              A,(CUR_X)
6313-3C              555 (  4)                 INC             A
6314-32 C0 5C        556 ( 13)                 LD              (CUR_X),A
6317-18 15           557 ( 12)                 JR              .DONE
6319-3A C1 5C        558 ( 13) .INC_Y: LD              A,(CUR_Y)
631C-FE 17           559 (  7)                 CP              24-1                    ; Check if on last row
631E-38 07           560 ( 7+)                 JR              C,.NXT_Y                ; no, just go to the next
6320-3E 00           561 (  7)                 LD              A,0                             ;   yes, so we:
6322-32 C1 5C        562 ( 13)                 LD              (CUR_Y),A               ;   reset Y
6325-18 07           563 ( 12)                 JR              .DONE                   ;   and we are done.
6327-3A C1 5C        564 ( 13) .NXT_Y: LD              A,(CUR_Y)
632A-3C              565 (  4)                 INC             A
632B-32 C1 5C        566 ( 13)                 LD              (CUR_Y),A
632E-F1              567 ( 10) .DONE:  POP             AF                              ; Restore AF
632F-C9              568 ( 10)                 RET
6330-                569
6330-                570       ;
6330-                571       ; Get the memory address for the attribute as indicated by the cursor.
6330-                572       ; At the end, HL should hold an address from $5800 and upwards.
6330-                573       ;
6330-                574       GET_ATTR_ADDR:
6330-F5              575 ( 11)                 PUSH    AF
6331-3A C1 5C        576 ( 13)                 LD              A,(CUR_Y)               ; X position
6334-0F              577 (  4)                 RRCA                                    ; Multiply by 32
6335-0F              578 (  4)                 RRCA
6336-0F              579 (  4)                 RRCA
6337-6F              580 (  4)                 LD              L,A                             ; Store as low byte
6338-E6 03           581 (  7)                 AND             3                               ; Mask bits for high byte
633A-C6 58           582 (  7)                 ADD             A,$58                   ; And with start of attribute address
633C-67              583 (  4)                 LD              H,A                             ; High byte done.
633D-7D              584 (  4)                 LD              A,L                             ; Get back x*32
633E-E6 E0           585 (  7)                 AND             $E0
6340-6F              586 (  4)                 LD              L,A                             ; Put in L.
6341-3A C0 5C        587 ( 13)                 LD              A,(CUR_X)               ; Get row start
6344-85              588 (  4)                 ADD             A,L                             ; Add to low byte
6345-6F              589 (  4)                 LD              L,A
6346-F1              590 ( 10)                 POP             AF
6347-C9              591 ( 10)                 RET
6348-                592
6348-                593       ;
6348-                594       ; Set attributes for the block currently indicated by the
6348-                595       ; cursor.
6348-                596       ;
6348-                597       SET_ATTR:
6348-E5              598 ( 11)                 PUSH    HL
6349-CD 30 63        599 ( 17)                 CALL    GET_ATTR_ADDR
634C-77              600 (  7)                 LD              (HL),A
634D-E1              601 ( 10)                 POP             HL
634E-C9              602 ( 10)                 RET
634F-                603
634F-                604       ;
634F-                605       ; Set the attributes for a row of screen memory, automatically setting the
634F-                606       ; cursor location to the beginning of the row. Does not increment after
634F-                607       ; every character as we're not actually printing data.
634F-                608       ;
634F-                609       SET_ATTR_ROW:
634F-E5              610 ( 11)                 PUSH    HL
6350-C5              611 ( 11)                 PUSH    BC
6351-CD 30 63        612 ( 17)                 CALL    GET_ATTR_ADDR
6354-                613
6354-06 20           614 (  7)                 LD              B,32
6356-77              615 (  7) .NEXT:  LD              (HL),A
6357-23              616 (  6)                 INC             HL
6358-05              617 (  4)                 DEC             B
6359-20 FB           618 ( 7+)                 JR              NZ,.NEXT
635B-C1              619 ( 10)                 POP             BC
635C-E1              620 ( 10)                 POP             HL
635D-C9              621 ( 10)                 RET
635E-                622
635E-                623       ;
635E-                624       ; Output character to the screen. Given that the assembled sources will be
635E-                625       ; expected to be ASCII, we'll need to subtract 32 from the value.
635E-                626       ;
635E-                627       SET_CHAR:
635E-F5              628 ( 11)                 PUSH    AF
635F-D6 20           629 (  7)                 SUB             32                              ; Subtract 32 from ASCII to get font offset
6361-CD 66 63        630 ( 17)                 CALL    SET_SYMBOL
6364-F1              631 ( 10)                 POP             AF
6365-C9              632 ( 10)                 RET
6366-                633
6366-                634       ;
6366-                635       ; Outputs character with A specifying index into font data, note that DE is
6366-                636       ; expected to hold the memory reference for the font used.
6366-                637       ;
6366-                638       SET_SYMBOL:
6366-C5              639 ( 11)                 PUSH    BC
6367-D5              640 ( 11)                 PUSH    DE
6368-E5              641 ( 11)                 PUSH    HL
6369-CD 8D 63        642 ( 17)                 CALL    GET_SCREEN_ADDR ; Get screen address for cursor location
636C-06 00           643 (  7)                 LD              B,0                             ; Find FONT_DATA character index
636E-4F              644 (  4)                 LD              C,A
636F-                645
636F-CB 21           646 (  8)                 SLA             C
6371-CB 10           647 (  8)                 RL              B
6373-CB 21           648 (  8)                 SLA             C
6375-CB 10           649 (  8)                 RL              B
6377-CB 21           650 (  8)                 SLA             C
6379-CB 10           651 (  8)                 RL              B
637B-                652
637B-EB              653 (  4)                 EX              DE, HL
637C-09              654 ( 11)                 ADD     HL, BC
637D-EB              655 (  4)                 EX              DE, HL
637E-CD CD 63        656 ( 17)                 CALL    SET_CHAR_PIXELS ; Output pixels to screen memory
6381-E1              657 ( 10)                 POP     HL
6382-D1              658 ( 10)                 POP             DE
6383-C1              659 ( 10)                 POP             BC
6384-C9              660 ( 10)                 RET
6385-                661
6385-                662       SET_FONT1:
6385-11 00 75        663 ( 10)                 LD              DE,FONT1                ; Start of font data
6388-C9              664 ( 10)                 RET
6389-                665
6389-                666       SET_FONT2:
6389-11 00 78        667 ( 10)                 LD              DE,FONT2
638C-C9              668 ( 10)                 RET
638D-                669
638D-                670       ;
638D-                671       ; Get the memory address for the character as indicated by the cursor,
638D-                672       ; the location in screen memory will be left in HL (from $4000 to $57FF).
638D-                673       ;
638D-                674       GET_SCREEN_ADDR:
638D-F5              675 ( 11)                 PUSH    AF
638E-3A C0 5C        676 ( 13)                 LD              A,(CUR_X)
6391-6F              677 (  4)                 LD              L,A
6392-                678
6392-3A C1 5C        679 ( 13)                 LD              A,(CUR_Y)
6395-E6 07           680 (  7)                 AND     %00000111
6397-1F              681 (  4)                 RRA
6398-1F              682 (  4)                 RRA
6399-1F              683 (  4)                 RRA
639A-1F              684 (  4)                 RRA
639B-B5              685 (  4)                 OR              L
639C-6F              686 (  4)                 LD              L,A
639D-3A C1 5C        687 ( 13)                 LD              A,(CUR_Y)
63A0-E6 18           688 (  7)                 AND     %00011000
63A2-F6 40           689 (  7)                 OR              /SCREEN                 ; Screen address HI byte
63A4-67              690 (  4)                 LD              H,A
63A5-                691
63A5-F1              692 ( 10)                 POP             AF
63A6-C9              693 ( 10)                 RET
63A7-                694
63A7-                695       ;
63A7-                696       ; Print string to the current cursor position, incrementing for each character
63A7-                697       ; that is "printed" to the screen memory.
63A7-                698       ;
63A7-E5              699 ( 11) PUTS:   PUSH    HL
63A8-F5              700 ( 11)                 PUSH    AF
63A9-7E              701 (  7) .NEXT:  LD              A,(HL)
63AA-B7              702 (  4)                 OR              A                               ; OR with itself to update the Z-flag.
63AB-28 0A           703 ( 7+)                 JR              Z,.DONE                 ; Done if we found byte that is $00
63AD-CD 5E 63        704 ( 17)                 CALL    SET_CHAR                ; Output character to cursor location
63B0-CD 01 63        705 ( 17)                 CALL    INC_CURSOR              ; Increment cursor to next position
63B3-23              706 (  6)                 INC             HL                              ; Next character
63B4-C3 A9 63        707 ( 10)                 JP              .NEXT
63B7-F1              708 ( 10) .DONE:  POP             AF
63B8-E1              709 ( 10)                 POP             HL
63B9-C9              710 ( 10)                 RET
63BA-                711
63BA-                712       ;
63BA-                713       ; Same as above except that we output symbols directly instead of translating
63BA-                714       ; ASCII characters (that way we don't have to hardcode symbols at +32).
63BA-                715       ;
63BA-E5              716 ( 11) PUTSS:  PUSH    HL
63BB-F5              717 ( 11)                 PUSH    AF
63BC-7E              718 (  7) .NEXT:  LD              A,(HL)
63BD-B7              719 (  4)                 OR              A                               ; OR with itself to update the Z-flag.
63BE-28 0A           720 ( 7+)                 JR              Z,.DONE                 ; Done if we found byte that is $00
63C0-CD 66 63        721 ( 17)                 CALL    SET_SYMBOL              ; Output character to cursor location
63C3-CD 01 63        722 ( 17)                 CALL    INC_CURSOR              ; Increment cursor to next position
63C6-23              723 (  6)                 INC             HL                              ; Next character
63C7-C3 BC 63        724 ( 10)                 JP              .NEXT
63CA-F1              725 ( 10) .DONE:  POP             AF
63CB-E1              726 ( 10)                 POP             HL
63CC-C9              727 ( 10)                 RET
63CD-                728
63CD-                729       ;
63CD-                730       ; Output character data into screen memory, these are 8x8 pixels - meaning
63CD-                731       ; we'll need to update eight different lines on the screen.
63CD-                732       ;
63CD-                733       SET_CHAR_PIXELS:
63CD-06 08           734 (  7)                 LD              B,8                             ; 8 lines per character
63CF-1A              735 (  7) .NEXT:  LD              A,(DE)                  ; Load character byte data
63D0-77              736 (  7)                 LD              (HL),A                  ; Store byte data in screen memory
63D1-13              737 (  6)                 INC             DE                              ; Next character byte
63D2-24              738 (  4)                 INC             H                               ; Screen line start every $100, so we do that
63D3-10 FA           739 ( 8+)                 DJNZ    .NEXT                   ; Loop unless B reached 0.
63D5-C9              740 ( 10)                 RET
63D6-                741
63D6-                742       ;
63D6-                743       ; Clear the entire screen, value in A is used to initialize the corresponding
63D6-                744       ; attribute bytes (when CLR_BG is called directly). The byte must have the
63D6-                745       ; following composition:
63D6-                746       ;       bit 0 (ink bit 0)
63D6-                747       ;           1 (        1)
63D6-                748       ;           2 (        2)
63D6-                749       ;       bit 3 (paper bit 0)
63D6-                750       ;           4 (          1)
63D6-                751       ;       5 (          2)
63D6-                752       ;   bit 6 (bright mode)
63D6-                753       ;   bit 7 (flash mode)
63D6-                754       ;
63D6-3E 00           755 (  7) CLEAR:  LD              A,0
63D8-F5              756 ( 11) CLR_BG: PUSH    AF
63D9-32 C2 5C        757 ( 13)                 LD              (LAST_A),A              ; Save attribute value for later
63DC-21 00 40        758 ( 10)                 LD              HL,SCREEN               ; Screen memory start
63DF-11 01 40        759 ( 10)                 LD              DE,SCREEN+1
63E2-01 00 18        760 ( 10)                 LD              BC,SZ_SCRN
63E5-36 00           761 ( 10)                 LD              (HL),0
63E7-ED B0           762 (16+)                 LDIR                                    ; Loop until we've written SZ_SCRN bytes
63E9-01 FF 02        763 ( 10)                 LD              BC,SZ_ATTR-1
63EC-77              764 (  7)                 LD              (HL),A
63ED-ED B0           765 (16+)                 LDIR                                    ; Loop until we've written all attributes
63EF-F1              766 ( 10)                 POP             AF
63F0-C9              767 ( 10)                 RET
63F1-                768
63F1-                769       MSG_TB_UPPER:
63F1-02 03 03 03 
     03 03 03 03 
     03 03 03 03 
     03 03 03        770                       .DB             $02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
6400-03 03 03 03 
     03 03 03 03 
     03 03 03 03 
     03 03 03        771                       .DB             $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
640F-03 04 00        772                       .DB             $03,$04,$00
6412-                773       MSG_TB_LOWER:
6412-06 05 05 05 
     05 05 05 05 
     05 05 05 05 
     05 05 05        774                       .DB             $06,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
6421-05 05 05 05 
     05 05 05 05 
     05 05 05 05 
     05 05 05        775                       .DB             $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
6430-05 07 00        776                       .DB             $05,$07,$00
6433-                777       MSG_TITLE:
6433-20 20 20 20 
     20 20 20 5A 
     58 20 49 4E 
     54 45 52 46 
     41 43 45 20 
     32 2E 30 32 
     31 20 20 20 
     20 20 20 20 
     00              778                       .AZ             "       ZX INTERFACE 2.021       "
6454-                779       MSG_HELP:
6454-20 20 20 28 
     3F 20 3D 20 
     38 20 20 3F 
     20 3D 20 39 
     20 20 53 54 
     41 52 54 20 
     3D 20 30 29 
     20 20 20 20     780                       .AS             "   (? = 8  ? = 9  START = 0)    "
6474-20 20 20 20 
     20 20 20 20 
     28 51 20 3D 
     20 5A 58 20 
     42 61 73 69 
     63 29 20 20 
     20 20 20 20 
     20 20 20 00     781                       .AZ             "        (Q = ZX Basic)         "
6494-                782       ERR_TITLE:
6494-20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 45 52 52 
     4F 52 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 00     783                       .AZ             "             ERROR             "
64B4-                784       ERR_MSG:
64B4-20 22 43 61 
     72 74 72 69 
     64 67 65 20 
     62 61 6E 6B 
     20 6E 6F 74 
     20 73 77 69 
     74 63 68 65 
     64 20 6F 75 
     74 20 61 73 
     20 65 78 70 
     65 63 74 65 
     64 2E 20 53 
     6F 66 74 77 
     61 72 65 20 
     66 6F 72        785                       .AS             " \"Cartridge bank not switched out as expected. Software for"
64EF-20 75 73 65 
     20 77 69 74 
     68 20 5A 58 
     20 49 6E 74 
     65 72 66 61 
     63 65 20 32 
     2E 30 32 31 
     20 6F 72 20 
     63 6F 6D 70 
     61 74 69 62 
     6C 65 20 68 
     61 72 64 77 
     61 72 65 2E 
     22 00           786                       .AZ             " use with ZX Interface 2.021 or compatible hardware.\""
6525-                787
7400                788                       .NO             $7400
7400-                789       FONT_SYMBOLS:
7400-                790                       .IN             font_symbols.asm
7400-            I     1               ; 00 (DOWN arrow)
7400-00          I     2               .db     %00000000
7401-FF          I     3               .db     %11111111
7402-81          I     4               .db     %10000001
7403-42          I     5               .db     %01000010
7404-24          I     6               .db     %00100100
7405-18          I     7               .db     %00011000
7406-00          I     8               .db     %00000000
7407-00          I     9               .db     %00000000
7408-            I    10
7408-            I    11               ; 01 (UP arrow)
7408-00          I    12               .db     %00000000
7409-18          I    13               .db     %00011000
740A-24          I    14               .db     %00100100
740B-42          I    15               .db     %01000010
740C-81          I    16               .db     %10000001
740D-FF          I    17               .db     %11111111
740E-00          I    18               .db     %00000000
740F-00          I    19               .db     %00000000
7410-            I    20
7410-            I    21               ; 02 (Upper left corner)
7410-00          I    22               .db     %00000000
7411-7F          I    23               .db     %01111111
7412-40          I    24               .db     %01000000
7413-5F          I    25               .db     %01011111
7414-50          I    26               .db     %01010000
7415-50          I    27               .db     %01010000
7416-50          I    28               .db     %01010000
7417-50          I    29               .db     %01010000
7418-            I    30
7418-            I    31               ; 03 (Upper line)
7418-00          I    32               .db     %00000000
7419-FF          I    33               .db     %11111111
741A-00          I    34               .db     %00000000
741B-FF          I    35               .db     %11111111
741C-00          I    36               .db     %00000000
741D-00          I    37               .db     %00000000
741E-00          I    38               .db     %00000000
741F-00          I    39               .db     %00000000
7420-            I    40
7420-            I    41               ; 04 (Upper right corner)
7420-00          I    42               .db     %00000000
7421-FE          I    43               .db     %11111110
7422-02          I    44               .db     %00000010
7423-FA          I    45               .db     %11111010
7424-0A          I    46               .db     %00001010
7425-0A          I    47               .db     %00001010
7426-0A          I    48               .db     %00001010
7427-0A          I    49               .db     %00001010
7428-            I    50
7428-            I    51               ; 05 (Lower line)
7428-00          I    52               .db     %00000000
7429-00          I    53               .db     %00000000
742A-00          I    54               .db     %00000000
742B-00          I    55               .db     %00000000
742C-FF          I    56               .db     %11111111
742D-00          I    57               .db     %00000000
742E-FF          I    58               .db     %11111111
742F-00          I    59               .db     %00000000
7430-            I    60
7430-            I    61               ; 06 (Lower left corner)
7430-50          I    62               .db     %01010000
7431-50          I    63               .db     %01010000
7432-50          I    64               .db     %01010000
7433-50          I    65               .db     %01010000
7434-5F          I    66               .db     %01011111
7435-40          I    67               .db     %01000000
7436-7F          I    68               .db     %01111111
7437-00          I    69               .db     %00000000
7438-            I    70
7438-            I    71               ; 07 (Lower right corner)
7438-0A          I    72               .db     %00001010
7439-0A          I    73               .db     %00001010
743A-0A          I    74               .db     %00001010
743B-0A          I    75               .db     %00001010
743C-FA          I    76               .db     %11111010
743D-02          I    77               .db     %00000010
743E-FE          I    78               .db     %11111110
743F-00          I    79               .db     %00000000
7440-            I    80
7440-            I    81               ; 08 (Left line)
7440-50          I    82               .db     %01010000
7441-50          I    83               .db     %01010000
7442-50          I    84               .db     %01010000
7443-50          I    85               .db     %01010000
7444-50          I    86               .db     %01010000
7445-50          I    87               .db     %01010000
7446-50          I    88               .db     %01010000
7447-50          I    89               .db     %01010000
7448-            I    90
7448-            I    91               ; 09 (Right line)
7448-0A          I    92               .db     %00001010
7449-0A          I    93               .db     %00001010
744A-0A          I    94               .db     %00001010
744B-0A          I    95               .db     %00001010
744C-0A          I    96               .db     %00001010
744D-0A          I    97               .db     %00001010
744E-0A          I    98               .db     %00001010
744F-0A          I    99               .db     %00001010
7500                791                       .NO             $7500,$FF
7500-                792       FONT1:  .BI             font1.bin
7800-                793                       .NO             $7800,$FF
7800-                794       FONT2:  .BI             font2.bin
7B00-                795
7B00-                796                       .NO             $7B00
7B00-                797       ATTRIBUTES:             ; Text and border attributes used.
7B00-                798       S_BORDER:               ; Used to set border in loader.
7B00-00              799                       .DB             A_BLACK
7B01-                800       S_BORDER_M:             ; Border colour once in the menu.
7B01-00              801                       .DB             A_BLACK
7B02-                802       S_DEFAULT:              ; Standard text
7B02-47              803                       .DB             A_P_BLACK|A_WHITE|A_BRIGHT
7B03-                804       S_TITLE:                ; Program title (MSG_TITLE)
7B03-47              805                       .DB             A_P_BLACK|A_WHITE|A_BRIGHT
7B04-                806       S_NAME:                 ; Cartridge title (TITLE0)
7B04-07              807                       .DB             A_P_BLACK|A_WHITE
7B05-                808       S_INACTIVE:             ; Inactive menu row.
7B05-07              809                       .DB             A_P_BLACK|A_WHITE
7B06-                810       S_ACTIVE:               ; Active menu row.
7B06-78              811                       .DB             A_P_WHITE|A_BLACK|A_BRIGHT
7B07-                812       S_HELP:                 ; Help text (MSG_HELP)
7B07-47              813                       .DB             A_P_BLACK|A_WHITE|A_BRIGHT
7B08-                814       S_ERROR                 ; Error screen text
7B08-42              815                       .DB             A_P_BLACK|A_RED|A_BRIGHT
7B09-                816       S_ERROR_TITLE:  ; Error screen title
7B09-C2              817                       .DB             A_P_BLACK|A_RED|A_BRIGHT|A_FLASH
7B0A-                818
7C00                819                       .NO             $7C00,$FF
7C00-20 20 20 20 
     20 20 20 20 
     43 61 72 74 
     72 69 64 67 
     65 20 4C 6F 
     61 64 65 72 
     20 20 20 20 
     20 20 20 00     820       TITLE0: .AZ             "        Cartridge Loader       "
7C20-                821                       .NO             $7C20,$00
7C20-20 4E 61 6D 
     65 20 31 00     822       TITLE1: .AZ             " Name 1"
7C40                823                       .NO             $7C40,$00
7C40-20 4E 61 6D 
     65 20 32 00     824       TITLE2: .AZ             " Name 2"
7C60                825                       .NO             $7C60,$00
7C60-20 4E 61 6D 
     65 20 33 00     826       TITLE3: .AZ             " Name 3"
7C80                827                       .NO             $7C80,$00
7C80-20 4E 61 6D 
     65 20 34 00     828       TITLE4: .AZ             " Name 4"
7CA0                829                       .NO             $7CA0,$00
7CA0-20 4E 61 6D 
     65 20 35 00     830       TITLE5: .AZ             " Name 5"
7CC0                831                       .NO             $7CC0,$00
7CC0-20 4E 61 6D 
     65 20 36 00     832       TITLE6: .AZ             " Name 6"
7CE0                833                       .NO             $7CE0,$00
7CE0-20 4E 61 6D 
     65 20 37 00     834       TITLE7: .AZ             " Name 7"
7D00                835                       .NO             $7D00,$00
7D00-20 4E 61 6D 
     65 20 38 00     836       TITLE8: .AZ             " Name 8"
7D20                837                       .NO             $7D20,$00
7D20-20 4E 61 6D 
     65 20 39 00     838       TITLE9: .AZ             " Name 9"
7D40                839                       .NO             $7D40,$00
7D40-                840       TITLE10:
7D40-20 4E 61 6D 
     65 20 41 00     841                       .AZ             " Name A"
7D60                842                       .NO             $7D60,$00
7D60-                843       TITLE11:
7D60-20 4E 61 6D 
     65 20 42 00     844                       .AZ             " Name B"
7D80                845                       .NO             $7D80,$00
7D80-                846       TITLE12:
7D80-20 4E 61 6D 
     65 20 43 00     847                       .AZ             " Name C"
7DA0                848                       .NO             $7DA0,$00
7DA0-                849       TITLE13:
7DA0-20 4E 61 6D 
     65 20 44 00     850                       .AZ             " Name D"
7DC0                851                       .NO             $7DC0,$00
7DC0-                852       TITLE14:
7DC0-20 4E 61 6D 
     65 20 45 00     853                       .AZ             " Name E"
7DE0                854                       .NO             $7DE0,$00
7DE0-                855       TITLE15:
7DE0-20 4E 61 6D 
     65 20 46 00     856                       .AZ             " Name F"
7FFC                857                       .NO             $7FFC,$00
7FFC-                858       SLOT_COUNT:
7FFC-03              859                       .DB             3
7FFD-00              860                       .DB             0
7FFE-00              861                       .DB             0
7FFF-00              862                       .DB             0
