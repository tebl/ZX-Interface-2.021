0000-                  4                       .OR             $0000
0000-                  5
0000-                  6                       .IN             constants.asm
4000-            I     1       SCREEN                  .EQU    $4000                   ; 16384
1800-            I     2       SZ_SCRN                 .EQU    $1800                   ; 6144  256*192 pixels, 8-pixels per byte
5800-            I     3       ATTR                    .EQU    $5800                   ; 22528
0300-            I     4       SZ_ATTR                 .EQU    $300                    ; 768   32*24 8-pixel blocks
0060-            I     5       SZ_FONT                 .EQU    $60                             ; 96
5CC0-            I     6       VARS                    .EQU    $5CC0                   ; 23744, used as start of variable space
5F00-            I     7       STACK                   .EQU    $5F00                   ; Stack decrement down from here
0400-            I     8       SIGNATURE               .EQU    $0400                   ; Software signature, used when checking banks.
0000-            I     9
001F-            I    10       CTRL_BANK               .EQU    31                              ; Bank register for ZX Interface 2.021
003F-            I    11       CTRL_LED                .EQU    63                              ; LED for ZX Diagnostic 2.021 cartridge
00FE-            I    12       CTRL_BORDER             .EQU    254                             ; Controls the screen border
0000-            I    13
0000-            I    14       ; Keyboard row definitions
0000-            I    15       ;                                        Bit     0   1 2 3 4
FEFE-            I    16       KR_SH_ZXCV              .EQU    $FEFE                   ;    SHIFT   Z X C V
FBFE-            I    17       KR_QWERT                .EQU    $FBFE                   ;        Q   W E R T
FDFE-            I    18       KR_ASDFG                .EQU    $FDFE                   ;        A   S D F G
F7FE-            I    19       KR_12345                .EQU    $F7FE                   ;        1   2 3 4 5
EFFE-            I    20       KR_09876                .EQU    $EFFE                   ;        0   9 8 7 6
DFFE-            I    21       KR_POIUY                .EQU    $DFFE                   ;        P   O I U Y
BFFE-            I    22       KR_EN_LKJH              .EQU    $BFFE                   ;    ENTER   L K J H
7FFE-            I    23       KR_SP_SY_MNB    .EQU    $7FFE                   ;    SPACE SYM M N B
0000-                  7                       .IN             attributes.asm
0000-            I     1       A_BLACK         .EQU    %00000000
0001-            I     2       A_BLUE          .EQU    %00000001
0002-            I     3       A_RED           .EQU    %00000010
0003-            I     4       A_MAGENTA       .EQU    %00000011
0004-            I     5       A_GREEN         .EQU    %00000100
0005-            I     6       A_CYAN          .EQU    %00000101
0006-            I     7       A_YELLOW        .EQU    %00000110
0007-            I     8       A_WHITE         .EQU    %00000111
0000-            I     9
0000-            I    10       A_P_BLACK       .EQU    A_BLACK<<3
0008-            I    11       A_P_BLUE        .EQU    A_BLUE<<3
0010-            I    12       A_P_RED         .EQU    A_RED<<3
0018-            I    13       A_P_MAGENTA     .EQU    A_MAGENTA<<3
0020-            I    14       A_P_GREEN       .EQU    A_GREEN<<3
0028-            I    15       A_P_CYAN        .EQU    A_CYAN<<3
0030-            I    16       A_P_YELLOW      .EQU    A_YELLOW<<3
0038-            I    17       A_P_WHITE       .EQU    A_WHITE<<3
0000-            I    18
0040-            I    19       A_BRIGHT        .EQU    %01000000
0080-            I    20       A_FLASH         .EQU    %10000000
4000-                  8       TARGET0 .EQU    $4000                   ; Bank 0, target RAM start
7000-                  9       TARGET1 .EQU    $7000                   ; Bank 1
A000-                 10       TARGET2 .EQU    $A000                   ; Bank 2
D000-                 11       TARGET3 .EQU    $D000                   ; Bank 3
3000-                 12       SZ_BANK .EQU    $3000                   ; Maximum payload size
0000-                 13
0000-                 14       ;
0000-                 15       ; This is the main program entrypoint when first starting up, also run when
0000-                 16       ; the user hits the reset button on the interface. The rest of the reset
0000-                 17       ; vectors are simply put here just in case the CPU retains something from
0000-                 18       ; previously run software.
0000-                 19       ;
0000-C3 00 01         20 ( 10) RESET:  JP              MAIN                    ; Just restart the main program.
0008                 21                       .NO             $0008,$FF
0008-C3 00 01         22 ( 10) RST_08: JP              MAIN                    ; Just restart the main program.
000B-ED 4D            23 ( 14)                 RETI                                    ; We shouldn't get here.
0010                 24                       .NO             $0010,$FF
0010-C3 00 01         25 ( 10) RST_10: JP              MAIN                    ; Just restart the main program.
0013-ED 4D            26 ( 14)                 RETI                                    ; We shouldn't get here.
0018                 27                       .NO             $0018,$FF
0018-C3 00 01         28 ( 10) RST_18: JP              MAIN                    ; Just restart the main program.
001B-ED 4D            29 ( 14)                 RETI                                    ; We shouldn't get here.
0028                 30                       .NO             $0028,$FF
0028-C3 00 01         31 ( 10) RST_28: JP              MAIN                    ; Just restart the main program.
002B-ED 4D            32 ( 14)                 RETI                                    ; We shouldn't get here.
0030                 33                       .NO             $0030,$FF
0030-C3 00 01         34 ( 10) RST_30: JP              MAIN                    ; Just restart the main program.
0033-ED 4D            35 ( 14)                 RETI                                    ; We shouldn't get here.
0035-                 36
0035-                 37       ;
0035-                 38       ; This is the standard maskable interrupt entrypoint that is normally used
0035-                 39       ; with the ZX Spectrum, it is hardwired into the ULA and will automatically
0035-                 40       ; initiate an interrupt every 100ms. This is referred to as Interrupt mode 1.
0035-                 41       ;
0038                 42                       .NO             $0038,$FF
0038-ED 4D            43 ( 14) RST_38: RETI
003A-                 44
003A-                 45       ;
003A-                 46       ; The non-maskable interrupt (NMI) is hardwired to do a jump to this address,
003A-                 47       ; this needs to be here so that pushing the NMI button on the interface doesn't
003A-                 48       ; simply crash the code - it'll jump here, expecting the code to be ready for
003A-                 49       ; it.
003A-                 50       ;
0066                 51                       .NO             $0066,$FF
0066-F3               52 (  4) RST_66: DI
0067-C3 00 01         53 ( 10)                 JP              MAIN                    ; Jump to the regular RESET routine
006A-ED 45            54 ( 14)                 RETN                                    ; We won't get here.
006C-                 55
006C-                 56       ;
006C-                 57       ; Main program, relocated here to stay clear of the ROM space associated with
006C-                 58       ; the various interrupts. The code will run only once; copying the boot screen
006C-                 59       ; into the screen memory, copy the payload program ("selector program") from
006C-                 60       ; payload to a RAM location and then start it from there. Note that we're
006C-                 61       ; avoiding the use of the stack, duplicating code instead of doing sensible
006C-                 62       ; things.
006C-                 63       ;
0100                 64                       .NO             $0100,$FF
0100-F3               65 (  4) MAIN:   DI                                              ; Disable interrupts (just to be safe)
0101-                 66                       ; IM            0                               ; Set interrupt mode 1
0101-                 67
0101-3E 00            68 (  7)                 LD              A,$00                   ; Load black colour into A
0103-D3 FE            69 ( 11)                 OUT             (CTRL_BORDER),A ;  and write to the border.
0105-                 70
0105-                 71                       ; Copy bank 0
0105-21 00 10         72 ( 10)                 LD              HL,PAYLOAD              ; Set source location
0108-01 00 30         73 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
010B-11 00 40         74 ( 10)                 LD              DE,TARGET0              ; Set target location
010E-ED B0            75 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
0110-                 76
0110-                 77                       ; Copy bank 1
0110-3E 01            78 (  7)                 LD              A,$01
0112-D3 1F            79 ( 11)                 OUT             (CTRL_BANK),A
0114-21 00 10         80 ( 10)                 LD              HL,PAYLOAD              ; Set source location
0117-01 00 30         81 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
011A-11 00 70         82 ( 10)                 LD              DE,TARGET1              ; Set target location
011D-ED B0            83 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
011F-                 84
011F-                 85                       ; Copy bank 2
011F-3E 02            86 (  7)                 LD              A,$02
0121-D3 1F            87 ( 11)                 OUT             (CTRL_BANK),A
0123-21 00 10         88 ( 10)                 LD              HL,PAYLOAD              ; Set source location
0126-01 00 30         89 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
0129-11 00 A0         90 ( 10)                 LD              DE,TARGET2              ; Set target location
012C-ED B0            91 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
012E-                 92
012E-                 93                       ; Copy bank 3
012E-3E 03            94 (  7)                 LD              A,$03
0130-D3 1F            95 ( 11)                 OUT             (CTRL_BANK),A
0132-21 00 10         96 ( 10)                 LD              HL,PAYLOAD              ; Set source location
0135-01 00 30         97 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
0138-11 00 D0         98 ( 10)                 LD              DE,TARGET3              ; Set target location
013B-ED B0            99 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
013D-                100
013D-                101                       ; Copy last stand instructions
013D-2A FC 0F        102 ( 16)                 LD              HL,(H_SP)               ; Place our stack below program stack,
0140-F9              103 (  6)                 LD              SP,HL                   ;  then configure it for use.
0141-06 11           104 (  7)                 LD              B,17                    ; Need 13 bytes, add space for 4 bytes of actual stack
0143-2B              105 (  6) .DEC_B: DEC             HL
0144-10 FD           106 ( 8+)                 DJNZ    .DEC_B
0146-E5              107 ( 11)                 PUSH    HL                              ; This is the start of last stand routine,
0147-06 0D           108 (  7)                 LD              B,13                    ;  we have 13 bytes of instructions that
0149-11 00 0F        109 ( 10)                 LD              DE,LAST_STAND   ;  will be read from address in DE (B for B).
014C-                110       .NEXT_BYTE:
014C-1A              111 (  7)                 LD              A,(DE)                  ; Load byte
014D-77              112 (  7)                 LD              (HL),A                  ;  and store in memory pointed to by HL
014E-13              113 (  6)                 INC             DE
014F-23              114 (  6)                 INC             HL
0150-10 FA           115 ( 8+)                 DJNZ    .NEXT_BYTE              ; Do this until 13 bytes copied.
0152-                116
0152-                117                       ; Restore registers
0152-3A E5 0F        118 ( 13)                 LD              A,(H_I)                 ; Load interrupt page into A
0155-ED 47           119 (  9)                 LD              I,A                             ;  and use it to set the page.
0157-                120
0157-D9              121 (  4)                 EXX                                             ; Restore shadow registers
0158-2A EC 0F        122 ( 16)                 LD              HL,(H_A_AF)             ; Load AF to HL and
015B-E5              123 ( 11)                 PUSH    HL                              ;  push onto stack
015C-F1              124 ( 10)                 POP             AF                              ;  the retrieve it to AF'.
015D-2A E6 0F        125 ( 16)                 LD              HL,(H_A_HL)             ; Restore HL'
0160-ED 5B E8 0F     126 ( 20)                 LD              DE,(H_A_DE)             ; Restore DE'
0164-ED 4B EA 0F     127 ( 20)                 LD              BC,(H_A_BC)             ; Restore BC'
0168-D9              128 (  4)                 EXX                                             ; Switch back to primary registers.
0169-                129
0169-ED 5B F0 0F     130 ( 20)                 LD              DE,(H_DE)               ; DE
016D-ED 4B F2 0F     131 ( 20)                 LD              BC,(H_BC)               ; BC
0171-FD 2A F4 0F     132 ( 20)                 LD              IY,(H_IY)               ; IY
0175-DD 2A F6 0F     133 ( 20)                 LD              IX,(H_IX)               ; IX
0179-                134                                                                       ; Interrupt needs to be set in last stand.
0179-3A FF 0F        135 ( 13)                 LD              A,(H_BOR)               ; Set the border colour by
017C-D3 FE           136 ( 11)                 OUT             (CTRL_BORDER),A ;  writing it to the port.
017E-2A FA 0F        137 ( 16)                 LD              HL,(H_AF)               ; AF register can only be set via the
0181-E5              138 ( 11)                 PUSH    HL                              ;  stack so we push the HL register
0182-F1              139 ( 10)                 POP             AF                              ;  to stack and then pop it back.
0183-                140
0183-E1              141 ( 10)                 POP             HL                              ; Pop last stand location
0184-F5              142 ( 11)                 PUSH    AF                              ; Push AF
0185-E9              143 (  4)                 JP              (HL)
0186-                144
0F00                145                       .NO             $0F00
0F00-                146       LAST_STAND:
0F00-21 00 01        147 ( 10)                 LD              HL,$0100                ; We can't use any of the registers, so this
0F03-                148                                                                       ;  will have to be substituted in some other way.
0F03-3E 20           149 (  7)                 LD              A,%00100000             ; Map out the cartridge ROM to enable ZX Basic
0F05-D3 1F           150 ( 11)                 OUT             (CTRL_BANK),A
0F07-F1              151 ( 10)                 POP             AF
0F08-                152                       ; IM            0                       ; IM2 ($ED5e), IM1 ($ED56), IM0 ($ED46)
0F08-00              153 (  4)                 NOP
0F09-00              154 (  4)                 NOP
0F0A-                155                       ; EI                                    ; $FB Replace with NOP if H_INT is Zero
0F0A-00              156 (  4)                 NOP
0F0B-ED 45           157 ( 14)                 RETN
0F0D-                158
0F0D-                159       ;
0F0D-                160       ; Snapshot header information to be duplicated into every slot, the values
0F0D-                161       ; here are just placeholders without any significance (to be replaced later).
0F0D-                162       ;
0FE5                163                       .NO             $0FE5
0FE5-                164       HEADER:
0FE5-00              165       H_I:    .DB             $00
0FE6-01 02           166       H_A_HL: .DB             $01,$02
0FE8-03 04           167       H_A_DE: .DB             $03,$04
0FEA-05 06           168       H_A_BC: .DB             $05,$06
0FEC-00 00           169       H_A_AF: .DB             $00,$00
0FEE-00 01           170       H_HL:   .DB             $00,$01
0FF0-AF 00           171       H_DE:   .DB             $AF,$00
0FF2-BA 02           172       H_BC:   .DB             $BA,$02
0FF4-00 00           173       H_IY:   .DB             $00,$00
0FF6-00 00           174       H_IX:   .DB             $00,$00
0FF8-00              175       H_INT:  .DB             $00
0FF9-34              176       H_R:    .DB             $34
0FFA-AC AF           177       H_AF:   .DB             $AC,$AF
0FFC-EE 5E           178       H_SP:   .DB             $EE,$5E
0FFE-00              179       H_INTM: .DB             $00
0FFF-03              180       H_BOR:  .DB             $03
1000-                181
1000-                182                       .NO             $1000
1000-                183       PAYLOAD:
1000-                184                       .BI             placeholder_ram.bin
