0000-                  4                       .OR             $0000
0000-                  5
0000-                  6                       .IN             constants.asm
4000-            I     1       SCREEN                  .EQU    $4000                   ; 16384
1800-            I     2       SZ_SCRN                 .EQU    $1800                   ; 6144  256*192 pixels, 8-pixels per byte
5800-            I     3       ATTR                    .EQU    $5800                   ; 22528
0300-            I     4       SZ_ATTR                 .EQU    $300                    ; 768   32*24 8-pixel blocks
0060-            I     5       SZ_FONT                 .EQU    $60                             ; 96
5CC0-            I     6       VARS                    .EQU    $5CC0                   ; 23744, used as start of variable space
5F00-            I     7       STACK                   .EQU    $5F00                   ; Stack decrement down from here
0400-            I     8       SIGNATURE               .EQU    $0400                   ; Software signature, used when checking banks.
0000-            I     9
001F-            I    10       CTRL_BANK               .EQU    31                              ; Bank register for ZX Interface 2.021
003F-            I    11       CTRL_LED                .EQU    63                              ; LED for ZX Diagnostic 2.021 cartridge
00FE-            I    12       CTRL_BORDER             .EQU    254                             ; Controls the screen border
0000-            I    13
0000-            I    14       ; Keyboard row definitions
0000-            I    15       ;                                        Bit     0   1 2 3 4
FEFE-            I    16       KR_SH_ZXCV              .EQU    $FEFE                   ;    SHIFT   Z X C V
FBFE-            I    17       KR_QWERT                .EQU    $FBFE                   ;        Q   W E R T
FDFE-            I    18       KR_ASDFG                .EQU    $FDFE                   ;        A   S D F G
F7FE-            I    19       KR_12345                .EQU    $F7FE                   ;        1   2 3 4 5
EFFE-            I    20       KR_09876                .EQU    $EFFE                   ;        0   9 8 7 6
DFFE-            I    21       KR_POIUY                .EQU    $DFFE                   ;        P   O I U Y
BFFE-            I    22       KR_EN_LKJH              .EQU    $BFFE                   ;    ENTER   L K J H
7FFE-            I    23       KR_SP_SY_MNB    .EQU    $7FFE                   ;    SPACE SYM M N B
0000-                  7                       .IN             attributes.asm
0000-            I     1       A_BLACK         .EQU    %00000000
0001-            I     2       A_BLUE          .EQU    %00000001
0002-            I     3       A_RED           .EQU    %00000010
0003-            I     4       A_MAGENTA       .EQU    %00000011
0004-            I     5       A_GREEN         .EQU    %00000100
0005-            I     6       A_CYAN          .EQU    %00000101
0006-            I     7       A_YELLOW        .EQU    %00000110
0007-            I     8       A_WHITE         .EQU    %00000111
0000-            I     9
0000-            I    10       A_P_BLACK       .EQU    A_BLACK<<3
0008-            I    11       A_P_BLUE        .EQU    A_BLUE<<3
0010-            I    12       A_P_RED         .EQU    A_RED<<3
0018-            I    13       A_P_MAGENTA     .EQU    A_MAGENTA<<3
0020-            I    14       A_P_GREEN       .EQU    A_GREEN<<3
0028-            I    15       A_P_CYAN        .EQU    A_CYAN<<3
0030-            I    16       A_P_YELLOW      .EQU    A_YELLOW<<3
0038-            I    17       A_P_WHITE       .EQU    A_WHITE<<3
0000-            I    18
0040-            I    19       A_BRIGHT        .EQU    %01000000
0080-            I    20       A_FLASH         .EQU    %10000000
4000-                  8       TARGET0 .EQU    $4000                   ; Bank 0, target RAM start
7000-                  9       TARGET1 .EQU    $7000                   ; Bank 1
A000-                 10       TARGET2 .EQU    $A000                   ; Bank 2
D000-                 11       TARGET3 .EQU    $D000                   ; Bank 3
3000-                 12       SZ_BANK .EQU    $3000                   ; Maximum payload size
0000-                 13
0000-                 14       ;
0000-                 15       ; This is the main program entrypoint when first starting up, also run when
0000-                 16       ; the user hits the reset button on the interface. The rest of the reset
0000-                 17       ; vectors are simply put here just in case the CPU retains something from
0000-                 18       ; previously run software.
0000-                 19       ;
0000-C3 00 01         20 ( 10) RESET:  JP              MAIN                    ; Just restart the main program.
0008                 21                       .NO             $0008,$FF
0008-C3 00 01         22 ( 10) RST_08: JP              MAIN                    ; Just restart the main program.
000B-ED 4D            23 ( 14)                 RETI                                    ; We shouldn't get here.
0010                 24                       .NO             $0010,$FF
0010-C3 00 01         25 ( 10) RST_10: JP              MAIN                    ; Just restart the main program.
0013-ED 4D            26 ( 14)                 RETI                                    ; We shouldn't get here.
0018                 27                       .NO             $0018,$FF
0018-C3 00 01         28 ( 10) RST_18: JP              MAIN                    ; Just restart the main program.
001B-ED 4D            29 ( 14)                 RETI                                    ; We shouldn't get here.
0028                 30                       .NO             $0028,$FF
0028-C3 00 01         31 ( 10) RST_28: JP              MAIN                    ; Just restart the main program.
002B-ED 4D            32 ( 14)                 RETI                                    ; We shouldn't get here.
0030                 33                       .NO             $0030,$FF
0030-C3 00 01         34 ( 10) RST_30: JP              MAIN                    ; Just restart the main program.
0033-ED 4D            35 ( 14)                 RETI                                    ; We shouldn't get here.
0035-                 36
0035-                 37       ;
0035-                 38       ; This is the standard maskable interrupt entrypoint that is normally used
0035-                 39       ; with the ZX Spectrum, it is hardwired into the ULA and will automatically
0035-                 40       ; initiate an interrupt every 100ms. This is referred to as Interrupt mode 1.
0035-                 41       ;
0038                 42                       .NO             $0038,$FF
0038-ED 4D            43 ( 14) RST_38: RETI
003A-                 44
003A-                 45       ;
003A-                 46       ; The non-maskable interrupt (NMI) is hardwired to do a jump to this address,
003A-                 47       ; this needs to be here so that pushing the NMI button on the interface doesn't
003A-                 48       ; simply crash the code - it'll jump here, expecting the code to be ready for
003A-                 49       ; it.
003A-                 50       ;
0066                 51                       .NO             $0066,$FF
0066-F3               52 (  4) RST_66: DI
0067-C3 00 01         53 ( 10)                 JP              MAIN                    ; Jump to the regular RESET routine
006A-ED 45            54 ( 14)                 RETN                                    ; We won't get here.
006C-                 55
006C-                 56       ;
006C-                 57       ; Macro definitions, this one is mainly used to keep the line count manageable
006C-                 58       ; when creating the last stand routine in memory.
006C-                 59       ;
006C-                 60       W_BYTE: .MA
006C-                 61                       LD              (HL),A                  ; Store A in address at HL, then
006C-                 62                       INC             HL                              ;  target position.
006C-                 63                       .EM
006C-                 64
006C-                 65       ;
006C-                 66       ; Main program, relocated here to stay clear of the ROM space associated with
006C-                 67       ; the various interrupts. The code will run only once; copying the boot screen
006C-                 68       ; into the screen memory, copy the payload program ("selector program") from
006C-                 69       ; payload to a RAM location and then start it from there. Note that we're
006C-                 70       ; avoiding the use of the stack, duplicating code instead of doing sensible
006C-                 71       ; things.
006C-                 72       ;
0100                 73                       .NO             $0100,$FF
0100-F3               74 (  4) MAIN:   DI                                              ; Disable interrupts (just to be safe)
0101-ED 56            75 (  8)                 IM              1                               ; Set interrupt mode 1
0103-2A FC 0F         76 ( 16)                 LD              HL,(H_SP)               ; Place our stack below program stack,
0106-F9               77 (  6)                 LD              SP,HL                   ;  then configure it for use.
0107-                 78
0107-3E 00            79 (  7)                 LD              A,$00                   ; Load black colour into A
0109-D3 FE            80 ( 11)                 OUT             (CTRL_BORDER),A ;  and write to the border.
010B-                 81
010B-                 82                       ; Copy bank 0
010B-21 00 10         83 ( 10)                 LD              HL,PAYLOAD              ; Set source location
010E-01 00 30         84 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
0111-11 00 40         85 ( 10)                 LD              DE,TARGET0              ; Set target location
0114-ED B0            86 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
0116-                 87
0116-                 88                       ; Copy bank 1
0116-3E 01            89 (  7)                 LD              A,$01
0118-D3 1F            90 ( 11)                 OUT             (CTRL_BANK),A
011A-21 00 10         91 ( 10)                 LD              HL,PAYLOAD              ; Set source location
011D-01 00 30         92 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
0120-11 00 70         93 ( 10)                 LD              DE,TARGET1              ; Set target location
0123-ED B0            94 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
0125-                 95
0125-                 96                       ; Copy bank 2
0125-3E 02            97 (  7)                 LD              A,$02
0127-D3 1F            98 ( 11)                 OUT             (CTRL_BANK),A
0129-21 00 10         99 ( 10)                 LD              HL,PAYLOAD              ; Set source location
012C-01 00 30        100 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
012F-11 00 A0        101 ( 10)                 LD              DE,TARGET2              ; Set target location
0132-ED B0           102 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
0134-                103
0134-                104                       ; Copy bank 3
0134-3E 03           105 (  7)                 LD              A,$03
0136-D3 1F           106 ( 11)                 OUT             (CTRL_BANK),A
0138-21 00 10        107 ( 10)                 LD              HL,PAYLOAD              ; Set source location
013B-01 00 30        108 ( 10)                 LD              BC,SZ_BANK              ; Number of bytes to copy
013E-11 00 D0        109 ( 10)                 LD              DE,TARGET3              ; Set target location
0141-ED B0           110 (16+)                 LDIR                                    ; Have Z80 copy data until all bytes copied
0143-                111
0143-                112                       ;
0143-                113                       ; Copy last stand instructions from LOADER_ADR, but if the value is all
0143-                114                       ; zeroes then we'll need to generate it ourselves instead. The
0143-                115                       ; rationale is that the cartridge creator should be able to make more
0143-                116                       ; sensible choices than we can.
0143-                117                       ;
0143-2A E3 0F        118 ( 16)                 LD              HL,(LOADER_ADR) ; Get LOADER_ADR from ROM
0146-3E 00           119 (  7)                 LD              A,0                             ; Load with a zero
0148-BC              120 (  4)                 CP              H                               ; Compare against H register,
0149-20 0B           121 ( 7+)                 JR              NZ,.COPY                ;  use the address if non-zero.
014B-BD              122 (  4)                 CP              L                               ; Compare against L register,
014C-20 08           123 ( 7+)                 JR              NZ,.COPY                ;  use the address if non-zero.
014E-                124
014E-2A FC 0F        125 ( 16)                 LD              HL,(H_SP)               ; Generate address, trying below the stack.
0151-06 11           126 (  7)                 LD              B,17                    ; Need 13 bytes, 4 bytes reserved for stack
0153-2B              127 (  6) .DEC_B: DEC             HL                              ;  so we decrement position
0154-10 FD           128 ( 8+)                 DJNZ    .DEC_B                  ;  until B reaches 0.
0156-E5              129 ( 11) .COPY:  PUSH    HL                              ; Push the HL as LAST_STAND address for later.
0157-                130
0157-                131                       ;
0157-                132                       ; Generating LAST STAND ROUTINE from scratch, adding them byte for byte
0157-                133                       ; to RAM until we're satisfied. To keep the mental mapping at a minimum
0157-                134                       ; we'll use $00 (NOP) to avoid different lengths.
0157-                135                       ;
0157-3E 21           136 (  7)                 LD              A,$21                   ; LD HL,(H_HL)
0159-                137                       >W_BYTE                                 ; Use macro to store in memory and increment.
0159-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
015A-23           M    2 (  6)                 INC             HL                              ;  target position.
015B-3A EE 0F        138 ( 13)                 LD              A,(H_HL)
015E-                139                       >W_BYTE
015E-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
015F-23           M    2 (  6)                 INC             HL                              ;  target position.
0160-3A EF 0F        140 ( 13)                 LD              A,(H_HL+1)
0163-                141                       >W_BYTE
0163-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0164-23           M    2 (  6)                 INC             HL                              ;  target position.
0165-                142
0165-                143       .BANK_OUT:                                              ; Bank out cartridge, enabling standard ROM.
0165-3E 3E           144 (  7)                 LD              A,$3E                   ; LD A,%00100000
0167-                145                       >W_BYTE
0167-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0168-23           M    2 (  6)                 INC             HL                              ;  target position.
0169-3E 20           146 (  7)                 LD              A,$20
016B-                147                       >W_BYTE
016B-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
016C-23           M    2 (  6)                 INC             HL                              ;  target position.
016D-3E D3           148 (  7)                 LD              A,$D3                   ; OUT(CTRL_BANK),A
016F-                149                       >W_BYTE
016F-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0170-23           M    2 (  6)                 INC             HL                              ;  target position.
0171-3E 1F           150 (  7)                 LD              A,$1F
0173-                151                       >W_BYTE
0173-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0174-23           M    2 (  6)                 INC             HL                              ;  target position.
0175-3E F1           152 (  7)                 LD              A,$F1                   ; POP AF
0177-                153                       >W_BYTE
0177-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0178-23           M    2 (  6)                 INC             HL                              ;  target position.
0179-                154
0179-                155       .SET_INTERRUPT_MODE:                    ; Set interrupt mode
0179-3E ED           156 (  7)                 LD              A,$ED                   ; Interrupt mode is set using two bytes, the
017B-                157                       >W_BYTE                                 ;  first one is always $ED.
017B-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
017C-23           M    2 (  6)                 INC             HL                              ;  target position.
017D-3A FE 0F        158 ( 13)                 LD              A,(H_INTM)              ; Compare interrupt mode,
0180-FE 00           159 (  7)                 CP              $00                             ;  does it match 0?
0182-20 06           160 ( 7+)                 JR              NZ,.CHK_IM1             ; No, check IM1 instead.
0184-3E 46           161 (  7)                 LD              A,$46                   ; Yes, set IM0
0186-                162                       >W_BYTE
0186-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0187-23           M    2 (  6)                 INC             HL                              ;  target position.
0188-18 0E           163 ( 12)                 JR              .IM_DONE
018A-                164       .CHK_IM1:
018A-FE 01           165 (  7)                 CP              $01                             ; Matches interrupt mode 1?
018C-20 06           166 ( 7+)                 JR              NZ,.CHK_IM2             ; No, check IM2 instead.
018E-3E 56           167 (  7)                 LD              A,$56                   ; Yes, set IM1
0190-                168                       >W_BYTE
0190-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0191-23           M    2 (  6)                 INC             HL                              ;  target position.
0192-18 04           169 ( 12)                 JR              .IM_DONE
0194-                170       .CHK_IM2:
0194-3E 5E           171 (  7)                 LD              A,$5E                   ; Only one left, so we set IM2
0196-                172                       >W_BYTE
0196-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
0197-23           M    2 (  6)                 INC             HL                              ;  target position.
0198-                173       .IM_DONE:
0198-                174
0198-                175       .SET_INTERRUPT:                                 ; Set whether the interrupt is enabled.
0198-3A F8 0F        176 ( 13)                 LD              A,(H_INT)               ; Check if Interrupt bit
019B-FE 00           177 (  7)                 CP              $00                             ;  is 0, meaning not enabled.
019D-20 06           178 ( 7+)                 JR              NZ,.INT_EI              ; Jump ahead if not.
019F-3E 00           179 (  7)                 LD              A,$00                   ; We just do a NOP as not enabled from start.
01A1-                180                       >W_BYTE
01A1-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
01A2-23           M    2 (  6)                 INC             HL                              ;  target position.
01A3-18 04           181 ( 12)                 JR              .INT_DONE
01A5-                182       .INT_EI:
01A5-3E FB           183 (  7)                 LD              A,$FB                   ; Enable maskable interrupts (EI)
01A7-                184                       >W_BYTE
01A7-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
01A8-23           M    2 (  6)                 INC             HL                              ;  target position.
01A9-                185       .INT_DONE:
01A9-                186
01A9-                187       .RETN:                                                  ; This resumes the program as from interrupt.
01A9-3E ED           188 (  7)                 LD              A,$ED                   ; RETN
01AB-                189                       >W_BYTE
01AB-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
01AC-23           M    2 (  6)                 INC             HL                              ;  target position.
01AD-3E 45           190 (  7)                 LD              A,$45
01AF-                191                       >W_BYTE
01AF-77           M    1 (  7)                 LD              (HL),A                  ; Store A in address at HL, then
01B0-23           M    2 (  6)                 INC             HL                              ;  target position.
01B1-                192
01B1-                193                       ;
01B1-                194                       ; Restore all of the registers that we can deal with at the moment,
01B1-                195                       ; but sincle we'll need at least some registers to work with - AF
01B1-                196                       ; will be pushed onto stack while the last stand routines will restore
01B1-                197                       ; HL when that is finally run.
01B1-                198                       ;
01B1-3A E5 0F        199 ( 13)                 LD              A,(H_I)                 ; Load interrupt page into A
01B4-ED 47           200 (  9)                 LD              I,A                             ;  and use it to set the page.
01B6-                201
01B6-D9              202 (  4)                 EXX                                             ; Restore shadow registers
01B7-2A EC 0F        203 ( 16)                 LD              HL,(H_A_AF)             ; Load AF to HL and
01BA-E5              204 ( 11)                 PUSH    HL                              ;  push onto stack
01BB-F1              205 ( 10)                 POP             AF                              ;  the retrieve it to AF'.
01BC-2A E6 0F        206 ( 16)                 LD              HL,(H_A_HL)             ; Restore HL'
01BF-ED 5B E8 0F     207 ( 20)                 LD              DE,(H_A_DE)             ; Restore DE'
01C3-ED 4B EA 0F     208 ( 20)                 LD              BC,(H_A_BC)             ; Restore BC'
01C7-D9              209 (  4)                 EXX                                             ; Switch back to primary registers.
01C8-                210
01C8-ED 5B F0 0F     211 ( 20)                 LD              DE,(H_DE)               ; DE
01CC-ED 4B F2 0F     212 ( 20)                 LD              BC,(H_BC)               ; BC
01D0-FD 2A F4 0F     213 ( 20)                 LD              IY,(H_IY)               ; IY
01D4-DD 2A F6 0F     214 ( 20)                 LD              IX,(H_IX)               ; IX
01D8-                215                                                                       ; Interrupt needs to be set in last stand.
01D8-3A FF 0F        216 ( 13)                 LD              A,(H_BOR)               ; Set the border colour by
01DB-D3 FE           217 ( 11)                 OUT             (CTRL_BORDER),A ;  writing it to the port.
01DD-2A FA 0F        218 ( 16)                 LD              HL,(H_AF)               ; AF register can only be set via the
01E0-E5              219 ( 11)                 PUSH    HL                              ;  stack so we push the HL register
01E1-F1              220 ( 10)                 POP             AF                              ;  to stack and then pop it back.
01E2-                221
01E2-E1              222 ( 10)                 POP             HL                              ; Get back the start of last stand routine
01E3-F5              223 ( 11)                 PUSH    AF                              ; Push AF to stack for later.
01E4-E9              224 (  4)                 JP              (HL)                    ; Jump to last stand copy in RAM
01E5-                225
01E5-                226       ;
01E5-                227       ; This is for the most part included so that I have something to compare the
01E5-                228       ; generated LAST_STAND routines against. Not actually called or referenced at
01E5-                229       ; any point in the program.
01E5-                230       ;
0F00                231                       .NO             $0F00
0F00-                232       LAST_STAND:
0F00-21 00 01        233 ( 10)                 LD              HL,$0100                ; We can't use any of the registers, so this
0F03-                234                                                                       ;  will have to be substituted in some other way.
0F03-3E 20           235 (  7)                 LD              A,%00100000             ; Map out the cartridge ROM to enable ZX Basic
0F05-D3 1F           236 ( 11)                 OUT             (CTRL_BANK),A
0F07-F1              237 ( 10)                 POP             AF
0F08-ED 46           238 (  8)                 IM              0                               ; IM0 ($ED46), depending on H_INTM.
0F0A-ED 56           239 (  8)                 IM              1                               ; IM1 ($ED56), depending on H_INTM.
0F0C-ED 5E           240 (  8)                 IM              2                               ; IM2 ($ED5e), depending on H_INTM.
0F0E-FB              241 (  4)                 EI                                              ; EI ($FB), replace with NOP if H_INT is Zero
0F0F-00              242 (  4)                 NOP
0F10-ED 45           243 ( 14)                 RETN
0F12-                244
0F12-                245       ;
0F12-                246       ; Snapshot header information to be duplicated into every slot, the values
0F12-                247       ; here are just placeholders without any significance (to be replaced later).
0F12-                248       ; Fields are loaded as LO/HI-byte using standard 16-bit LD directives.
0F12-                249       ;
0FE3                250                       .NO             $0FE3
0FE3-                251       LOADER_ADR:
0FE3-00 00           252                       .DB             $00,$00
0FE5-                253                       .NO             $0FE5
0FE5-                254       HEADER:
0FE5-00              255       H_I:    .DB             $00
0FE6-01 02           256       H_A_HL: .DB             $01,$02
0FE8-03 04           257       H_A_DE: .DB             $03,$04
0FEA-05 06           258       H_A_BC: .DB             $05,$06
0FEC-00 00           259       H_A_AF: .DB             $00,$00
0FEE-00 01           260       H_HL:   .DB             $00,$01
0FF0-AF 00           261       H_DE:   .DB             $AF,$00
0FF2-BA 02           262       H_BC:   .DB             $BA,$02
0FF4-00 00           263       H_IY:   .DB             $00,$00
0FF6-00 00           264       H_IX:   .DB             $00,$00
0FF8-00              265       H_INT:  .DB             $00
0FF9-34              266       H_R:    .DB             $34
0FFA-AC AF           267       H_AF:   .DB             $AC,$AF
0FFC-EE 5E           268       H_SP:   .DB             $EE,$5E
0FFE-00              269       H_INTM: .DB             $00
0FFF-03              270       H_BOR:  .DB             $03
1000-                271
1000-                272                       .NO             $1000
1000-                273       PAYLOAD:
1000-                274                       .BI             placeholder_ram.bin
